Covar.cpp:117:            LOGGER.e(0, "covariates can't have duplicate FID+IID.");
Covar.cpp:127:            LOGGER.e(0, "covariates can't have duplicate FID+IID.");
Covar.cpp:138:            LOGGER.e(0, "covariates can't have duplicate FID+IID.");
Covar.cpp:217:            LOGGER.e(0, "something impossile happened.");
Covar.cpp:224:        LOGGER.e(0, "0 covartiate to be included.");
Covar.cpp:245:            LOGGER.e(0, err_string);
Covar.cpp:285:            LOGGER.e(0, "column " + to_string(i) + ", " + err_string);
Covar.cpp:297:                LOGGER.e(0, "column " + to_string(i) + ", " + err_string);
Covar.cpp:468:        LOGGER.e(0, "can't read " + err_string);
Covar.cpp:493:        LOGGER.e(0, "less than " + to_string(least_col) + " columns in " + err_string);
Covar.cpp:496:        LOGGER.e(0, "can't read " + to_string(last_keep) + "th column from " + err_string);
Covar.cpp:541:            LOGGER.e(0, "can't read " + to_string(last_keep) + "th column of line " + to_string(line_number) + " from " + err_string);
Covar.cpp:568:                            LOGGER.e(0, "too many levels in covariate #" + to_string(col_index + 1) + ". You may fit it as a quantitative covariate using --qcovar.");
Covar.cpp:576:                        LOGGER.e(0, "line " + to_string(line_number) + " contains non-numeric values in " + err_string);
Covar.cpp:644:    LOGGER.e(0, "No main function in covariate yet.");
FastFAM.cpp:255:        //LOGGER.e(0, "debug");
FastFAM.cpp:330:            LOGGER.e(0, "Some sample ID in model are not existed in genotype!");
FastFAM.cpp:345:            LOGGER.e(0, "can't open file [" + bin_file + "] to read.");
FastFAM.cpp:349:            LOGGER.e(0, "can't read magic number.");
FastFAM.cpp:352:            LOGGER.e(0, "wrong header in [" + bin_file + "], this file can only generate from GCTA model.");
FastFAM.cpp:357:            LOGGER.e(0, "can't read sample size.");
FastFAM.cpp:360:            LOGGER.e(0, "wrong number of samples in [" + bin_file + "], this file can only generate from GCTA model.");
FastFAM.cpp:365:            LOGGER.e(0, "can't read number of covariates in [" + bin_file + "], this file can only generate from GCTA model.");
FastFAM.cpp:371:            LOGGER.e(0, "can't read covariate flag");
FastFAM.cpp:375:            LOGGER.e(0, "can't tao value in [" + bin_file + "], this file can only generate from GCTA model.");
FastFAM.cpp:379:            LOGGER.e(0, "can't c_inf in [" + bin_file + "], this file can only generate from GCTA model.");
FastFAM.cpp:388:            LOGGER.e(0, "failed to read mu.");
FastFAM.cpp:396:            LOGGER.e(0, "failed to read phenotype.");
FastFAM.cpp:407:            LOGGER.e(0, "failed to read covariates from model.");
FastFAM.cpp:417:            LOGGER.e(0, "failed to read H from model.");
FastFAM.cpp:448:            LOGGER.e(0, "Some sample ID in model are not existed in genotype!");
FastFAM.cpp:458:            LOGGER.e(0, "can't open file [" + bin_file + "] to read.");
FastFAM.cpp:461:            LOGGER.e(0, "can't read header in [" + bin_file + "].");
FastFAM.cpp:464:            LOGGER.e(0, "wrong header in [" + bin_file + "], this file can only generate from GCTA model.");
FastFAM.cpp:467:            LOGGER.e(0, "the sample in model is different from id file!");
FastFAM.cpp:495:            LOGGER.e(0, "failed to read phenotype from model.");
FastFAM.cpp:510:            LOGGER.e(0, "failed to read covariates from model.");
FastFAM.cpp:524:                LOGGER.e(0, "failed to read covariates from model.");
FastFAM.cpp:558:                    LOGGER.e(0, "failed to read the V inverse from model.");
FastFAM.cpp:623:        LOGGER.e(0, "Did you forget to specify --pheno?");
FastFAM.cpp:636:            LOGGER.e(0, "No overlappping individual with non-missing data to be included from the covariate file(s).");
FastFAM.cpp:762:            if(!pheno_w) LOGGER.e(0, "failed to write " + options["out"]+".cphen");
FastFAM.cpp:817:        LOGGER.e(0, "Vp < 1e-5, which is not quite right. Please check: 1. Phenotype scale issue? 2. The covariates could explain all Vp; 3. Very rare prevalence of disease.");
FastFAM.cpp:863:                        LOGGER.e(0, "Unknown method to estimate the Vg");
FastFAM.cpp:904:                    if(!inv_id) LOGGER.e(0, "failed to write " + options["out"]+".grm.id");
FastFAM.cpp:917:                    if(!inv_id) LOGGER.e(0, "failed to write " + options["out"]+".grm.id");
FastFAM.cpp:930:                                LOGGER.e(0, "can't write to [" + options["out"] + ".grm.inv]");
FastFAM.cpp:948:                LOGGER.e(0, "can't read file [" + id_file + "].");
FastFAM.cpp:968:                    LOGGER.e(0, "samples are not same from line " + to_string(cur_index + 1) + " in [" + id_file + "].");
FastFAM.cpp:976:                LOGGER.e(0, "Empty file or lines not consistent in inverse V [" + id_file + "].");
FastFAM.cpp:985:                LOGGER.e(0, "can't open the file.");
FastFAM.cpp:998:                    LOGGER.e(0, "can't read file in pos: " + to_string(cur_pos));
FastFAM.cpp:1014:        if(!inv_id) LOGGER.e(0, "failed to write " + options["out"]+".grm.id");
FastFAM.cpp:1043:            LOGGER.e(0, "can't open " + bin_file + " to write.");
FastFAM.cpp:1047:            LOGGER.e(0, "can't write header to " + bin_file + ".");
FastFAM.cpp:1053:                LOGGER.e(0, "can't write phenotype to " + bin_file + ".");
FastFAM.cpp:1057:                LOGGER.e(0, "can't write phenotype to " + bin_file + ".");
FastFAM.cpp:1065:            LOGGER.e(0, "can't write covariates to " + bin_file + ".");
FastFAM.cpp:1071:                LOGGER.e(0, "can't write covariates to " + bin_file + ".");
FastFAM.cpp:1084:                        LOGGER.e(0, "can't write V inverse to " + bin_file + ".");
FastFAM.cpp:1219:        LOGGER.e(0, "can't inverse the V");
FastFAM.cpp:1428:        LOGGER.e(0, "can't inverse the V");
FastFAM.cpp:1442:        LOGGER.e(0, "can't inverse XtViX");
FastFAM.cpp:1472:            LOGGER.e(0, "Hi can't be inverted.");
FastFAM.cpp:1509:            LOGGER.e(0, "Error to open the " + options["out"] + ".reml");
FastFAM.cpp:1605:        LOGGER.e(0, "fastGWA-REML can't converge.");
FastFAM.cpp:1615:        LOGGER.e(0, "fastGWA-REML can't converge, hit upper limit!");
FastFAM.cpp:1670:        LOGGER.e(0, "can't solve the regression");
FastFAM.cpp:1716:        LOGGER.e(0, "can't read [" + filename + ".grm.sp]");
FastFAM.cpp:1832:        LOGGER.e(0, "can't invert the V matrix");
FastFAM.cpp:1845:        LOGGER.e(0, "can't read " + to_string(num_marker_rand) + " SNPs from autosome for tuning.");
FastFAM.cpp:1901:        LOGGER.e(0, "some SNPs didn't read successfully!");
FastFAM.cpp:1940:        LOGGER.e(0, "Not enough valid null SNPs (<100). \nUsers may check if there are too many signals or the MAF/INFO/genotype-missing-rate criteria is too stringent.");
FastFAM.cpp:1952:        LOGGER.e(0, "Inconsistent sample size, there may be some unknown bugs.");
FastFAM.cpp:1958:            LOGGER.e(0, "can't write fastGWA MLM parameters to the file.");
FastFAM.cpp:1991:            LOGGER.e(0, "can't inverse the FAM");
FastFAM.cpp:1996:        LOGGER.e(0, "Unknown inverse methods");
FastFAM.cpp:2071:                    LOGGER.e(0, "can't write allele frequency to [" + sFileName + ".bin].");
FastFAM.cpp:2075:                    LOGGER.e(0, "can't write beta to [" + sFileName + ".bin].");
FastFAM.cpp:2078:                    LOGGER.e(0, "can't write se to [" + sFileName + ".bin].");
FastFAM.cpp:2081:                    LOGGER.e(0, "can't write p to [" + sFileName + ".bin].");
FastFAM.cpp:2084:                    LOGGER.e(0, "can't write Padj to [" + sFileName + ".bin].");
FastFAM.cpp:2088:                    LOGGER.e(0, "can't write N to [" + sFileName + ".bin].");
FastFAM.cpp:2092:                        LOGGER.e(0, "can't write INFO score to [" + sFileName + ".bin].");
FastFAM.cpp:2140:                    LOGGER.e(0, "can't write allele frequency to [" + sFileName + ".bin].");
FastFAM.cpp:2144:                    LOGGER.e(0, "can't write beta to [" + sFileName + ".bin].");
FastFAM.cpp:2147:                    LOGGER.e(0, "can't write se to [" + sFileName + ".bin].");
FastFAM.cpp:2150:                    LOGGER.e(0, "can't write p to [" + sFileName + ".bin].");
FastFAM.cpp:2154:                    LOGGER.e(0, "can't write N to [" + sFileName + ".bin].");
FastFAM.cpp:2158:                        LOGGER.e(0, "can't write INFO score to [" + sFileName + ".bin].");
FastFAM.cpp:2295:            LOGGER.e(0, "can't open [" + sFileName + "] to write.");
FastFAM.cpp:2303:            LOGGER.e(0, "can't open [" + sFileName + ".snpinfo] to write.");
FastFAM.cpp:2308:            LOGGER.e(0, "can't open [" + sFileName + ".bin] to write.");
FastFAM.cpp:2393:        LOGGER.e(0, "Obsoleted flag, try --fastGWA-mlm or --fastGWA-mlm-exact");
FastFAM.cpp:2402:        LOGGER.e(0, "Obsoleted flag, try --fastGWA-mlm or --fastGWA-mlm-exact");
FastFAM.cpp:2410:            LOGGER.e(0, curFlag + "can't deal with 0 or > 1 files");
FastFAM.cpp:2420:            LOGGER.e(0, "--fastGWA-mlm must run with --grm-sparse");
FastFAM.cpp:2431:            LOGGER.e(0, "--fastGWA-mlm-binary must run with --grm-sparse");
FastFAM.cpp:2440:            LOGGER.e(0, curFlag + " can only work with --fastGWA-mlm");
FastFAM.cpp:2450:            LOGGER.e(0, "--fastGWA-mlm-exact must run with --grm-sparse");
FastFAM.cpp:2460:            LOGGER.e(0, "--fastGWA-lr can't run with --grm-sparse currently");
FastFAM.cpp:2472:            LOGGER.e(0, curFlag + " can't handle other than 2 numbers");
FastFAM.cpp:2483:            LOGGER.e(0, curFlag + "can't deal with covar other than 1");
FastFAM.cpp:2551:            LOGGER.e(0, "can't load multiple --load-inv files");
FastFAM.cpp:2570:              LOGGER.e(0, "can't read " + options["model_file"] + ".mdl.id");
FastFAM.cpp:2578:              LOGGER.e(0, "can't read the model binary file.");
FastFAM.cpp:2582:           LOGGER.e(0, "can't load multiple --load-model files");
FastFAM.cpp:2588:        LOGGER.e(0, "can't model and load model at the same time");
FastFAM.cpp:2601:                LOGGER.e(0, "can't read " + options["geneset"]);
FastFAM.cpp:2609:            LOGGER.e(0, "Set based test can only be applied to 2nd step with --load-model flag.");
FastFAM.cpp:2612:            LOGGER.e(0, "set based test should input the set list by --set-list flag");
FastFAM.cpp:2752:        LOGGER.e(0, "Can't find the region set, specify by --set-list");
FastFAM.cpp:2764:        LOGGER.e(0, "can't open [" + sFileName + "] to write.");
FastFAM.cpp:2773:        LOGGER.e(0, "can't find a valid gene in genotype");
FastFAM.cpp:2941:           LOGGER.e(0, "XtWX is not invertable!");
FastFAM.cpp:2972:        LOGGER.e(0, "can't inverse the V matrix!");
FastFAM.cpp:2977:        LOGGER.e(0, "can't get the ViX matrix!");
FastFAM.cpp:2985:        LOGGER.e(0, "XtViX is not invertable!");
FastFAM.cpp:3026:            LOGGER.e(0, "can't inverse the V matrix!");
FastFAM.cpp:3033:            LOGGER.e(0, "XtViX is not invertable!");
FastFAM.cpp:3056:            LOGGER.e(0, "Error to open the " + options["out"] + ".reml");
FastFAM.cpp:3234:            LOGGER.e(0, "can't inverse the V matrix!");
FastFAM.cpp:3241:            LOGGER.e(0, "XtViX is not invertable!");
FastFAM.cpp:3289:        LOGGER.e(0, "XtWX is not invertable!");
FastFAM.cpp:3301:        LOGGER.e(0, "can't inverse the V matrix!");
FastFAM.cpp:3308:        LOGGER.e(0, "XtViX is not invertable!");
FastFAM.cpp:3355:        if(!inv_id) LOGGER.e(0, "failed to write " + options["out"]+".grm.id");
FastFAM.cpp:3425:        LOGGER.e(0, "can't read " + to_string(num_marker_rand) + " SNPs from autosome for tuning.");
FastFAM.cpp:3463:            LOGGER.e(0, "fail to estimate gamma, too many signals may exist! Or use --cv-threshold to lower the threshold");
FastFAM.cpp:3475:            LOGGER.e(0, "some SNPs didn't read successfully!");
GRM.cpp:60:            LOGGER.e(0, "can't open " + grm_file + ".grm.bin");
GRM.cpp:63:            LOGGER.e(0, "The GRM id and GRM binary is not matching [" + grm_file + "]");
GRM.cpp:106:        LOGGER.e(0, "can't open " + mgrm_file + " to read.");
GRM.cpp:126:        LOGGER.e(0, out_err);
GRM.cpp:129:        LOGGER.e(0, "only 2 grm supported currently.");
GRM.cpp:138:        LOGGER.e(0, "The sample id in two GRM is not same, try --unify-grm first.");
GRM.cpp:141:    if(!o_id) LOGGER.e(0, "can't write to [" + options["out"] + ".grm.id]");
GRM.cpp:154:        LOGGER.e(0, "The size of [" + files[0] + ".grm.bin] is not correct.");
GRM.cpp:157:        LOGGER.e(0, "The size of [" + files[0] + ".grm.N.bin] is not correct.");
GRM.cpp:160:        LOGGER.e(0, "The size of [" + files[1] + ".grm.bin] is not correct.");
GRM.cpp:163:        LOGGER.e(0, "The size of [" + files[1] + ".grm.N.bin] is not correct.");
GRM.cpp:191:            LOGGER.e(0, "can't write to [" + out_file + ".grm.bin].");
GRM.cpp:194:            LOGGER.e(0, "can't write to [" + out_file + ".grm.N.bin].");
GRM.cpp:211:        LOGGER.e(0, "can't open " + mgrm_file + " to read.");
GRM.cpp:231:        LOGGER.e(0, out_err);
GRM.cpp:234:        LOGGER.e(0, "not enough valid GRM in to unify");
GRM.cpp:319:            LOGGER.e(0, "can't read " + file_name + ".");
GRM.cpp:324:            LOGGER.e(0, "can't write to " + wfile_name + ".");
GRM.cpp:342:                LOGGER.e(0, "Error reading [" + file_name + "], in position " + to_string(ftell(h_grm)), ".");
GRM.cpp:355:                        LOGGER.e(0, "Error reading [" + file_name + "], in position " + to_string(bytes_offset), ".");
GRM.cpp:364:                LOGGER.e(0, "writing to [" + wfile_name + "], pos: " + std::to_string(ftell(h_wgrm)) + "."); 
GRM.cpp:382:    if(!o_id) LOGGER.e(0, "can't write to [" + options["out"] + ".grm.id]");
GRM.cpp:387:        if(!o_fam) LOGGER.e(0, "can't write to [" + options["out"] + ".grm.sp]");
GRM.cpp:416:            LOGGER.e(0, "Read GRM failed between line " + to_string(index_grm_pairs[part_index].first + 1) + " and "
GRM.cpp:467:                LOGGER.e(0, "Write output failed"); 
GRM.cpp:527:            LOGGER.e(0, "Write GRM N failed"); 
GRM.cpp:549:            LOGGER.e(0, "can't write to [" + options["out"] + ".grm.id]");
GRM.cpp:560:            LOGGER.e(0, "can't write to [" + options["out"] + ".family.txt, .singleton.txt]");
GRM.cpp:573:            LOGGER.e(0, "Read GRM failed between line " + to_string(index_grm_pairs[part_index].first + 1) + " and "
GRM.cpp:669:        LOGGER.e(0, "can't open [" + options["out"] + ".grm.bin] for write");
GRM.cpp:702:            LOGGER.e(0, "Read failed between line " + to_string(index_grm_pairs[part_index].first + 1) + " and "
GRM.cpp:723:            LOGGER.e(0, "Write output file failed, please check the disk condition or permission");
GRM.cpp:757:        LOGGER.e(0, "can not calculate" + to_string(part) + " larger than " + to_string(this->num_parts));
GRM.cpp:776:            LOGGER.e(0, "can't allocate enough memory to genotype buffer.");
GRM.cpp:794:        LOGGER.e(0, "can't allocate enough memory to store mask.");
GRM.cpp:810:        LOGGER.e(0, "can't allocate enough memory to (parted) GRM: " + to_string(fill_grm*sizeof(double) / 1024.0/1024/1024) + "GB");
GRM.cpp:816:        LOGGER.e(0, "can't allocate enough memory to (parted) N: " + to_string(fill_grm*sizeof(uint32_t) / 1024.0/1024/1024) + "GB");
GRM.cpp:872:    if (!grm_id) { LOGGER.e(0, "can not open the file [" + o_grm_id + "] to write"); }
GRM.cpp:1380:            LOGGER.e(0, "can't open " + o_name + ".grm.sp to write");
GRM.cpp:1388:            LOGGER.e(0, "can't open " + o_name + ".grm.bin or .grm.N.bin to write");
GRM.cpp:1704:            LOGGER.e(0, "can't handle multiple GRM files");
GRM.cpp:1711:                LOGGER.e(0, "not allowed to have the same file name for the input and output");
GRM.cpp:1744:        LOGGER.e(0, "can't specify --make-grm-part, --make-grm-d-part or --make-grm-xchr-part together");
GRM.cpp:1753:                LOGGER.e(0, part_grm_symbol + " can only deal with integer value");
GRM.cpp:1756:                LOGGER.e(0, part_grm_symbol + "arguments should >= 1");
GRM.cpp:1759:                LOGGER.e(0, part_grm_symbol + "1st parameter (number of parts) can't less than 2nd parameter");
GRM.cpp:1778:            LOGGER.e(0, part_grm_symbol + " takes two arguments, total parts and part to calculate currently");
GRM.cpp:1879:                    LOGGER.e(0, "--grm-cutoff can't deal with more than one value currently");
GRM.cpp:1882:                    LOGGER.e(0, "can't find --grm flag that is essential to --grm-cutoff");
GRM.cpp:1897:                    LOGGER.e(0, opitem + " can't deal with more than one value currently");
GRM.cpp:1900:                    LOGGER.e(0, "can't find --grm flag that is essential to " + opitem);
GRM.cpp:1926:                LOGGER.e(0, "can't find --grm flag that is essential to " + curFlag);
GRM.cpp:1938:                LOGGER.e(0, curFlag + " can't deal with more than one value currently");
GRM.cpp:1981:        LOGGER.e(0, "can't allnocate enough memory for genotype buffer.");
GRM.cpp:1989:        LOGGER.e(0, "original version has been deleted, please use GCTA 1.92.4");
GRM.cpp:2019:        LOGGER.e(0, "can't allnocate enough memory for genotype buffer.");
GRM.cpp:2027:        LOGGER.e(0, "original version has been deleted, please use GCTA 1.92.4");
Geno.cpp:162:        LOGGER.e(0, "No genotype file specified");
Geno.cpp:400:                LOGGER.e(0, "the third columun shall be a number");
Geno.cpp:403:                LOGGER.e(0, "frequency values shall be in range from 0 to 1");
Geno.cpp:456:    if (!o_freq) { LOGGER.e(0, "can not open the file [" + name_frq + "] to write"); }
Geno.cpp:515:        LOGGER.e(0, message);
Geno.cpp:536:            LOGGER.e(0, "can't open [" + cur_bed_file + "] to read.");
Geno.cpp:560:                    LOGGER.e(0, "read [" + geno_files[cur_file_index] + "] error.\nThere might be some problems in your storage, or have you changed the file?");
Geno.cpp:568:            LOGGER.e(0, "read [" + geno_files[cur_file_index] + "] error.\nThere might be some problems in your storage, or have you changed the file?");
Geno.cpp:649:        LOGGER.e(0, "can't allocate enough memory to read genotype.");
Geno.cpp:674:        LOGGER.e(0, "can't allocate enough memory to read genotype.");
Geno.cpp:703:            LOGGER.e(0, "inconsistent sample size in bgen file [" + geno_files[i] + "] to the input of --sample.");
Geno.cpp:714:        LOGGER.e(0, "can't allocate enough memory to read genotype.");
Geno.cpp:846:        LOGGER.e(0, err);
Geno.cpp:897:                LOGGER.e(0, "find heterozygote (1) coding in ChrX (23) for male samples. GCTA follows the convention of PLINK, and treat ChrX (23) as non-PAR while male coded as 0/2. \nPlease check the gender information, or use PLINK --split-x to seperate the ChrX into non-PAR (chr23) and PAR (chr25).\nnon-PAR has the dosage compensation problem, you can specify by --dc flag, 0: no compensation, 1: dosage compensation (default 1 in GCTA).");
Geno.cpp:1051:                LOGGER.e(0, "can't read " + to_string(lag_index) + "th SNP in [" + geno_files[fileIndex] + "].");
Geno.cpp:1163:                LOGGER.e(0, "decompress genotype data error in " + error_promp); 
Geno.cpp:1170:                    LOGGER.e(0, "not compressed by zstd in " + error_promp);
Geno.cpp:1173:                    LOGGER.e(0, "original size unknown in " + error_promp);
Geno.cpp:1177:                LOGGER.e(0, "size stated in compressed data is different from " + error_promp);
Geno.cpp:1182:                LOGGER.e(0, "decompress genotype error: " + string(ZSTD_getErrorName(dSize)) + " in " + error_promp);
Geno.cpp:1185:            LOGGER.e(0, "unknown compress format in " + error_promp);
Geno.cpp:1193:        LOGGER.e(0, "inconsistent number of sample in " + error_promp);
Geno.cpp:1197:        LOGGER.e(0, "multi alleles detected in " + error_promp);
Geno.cpp:1205:        LOGGER.e(0, "multi ploidy detected in " + error_promp);
Geno.cpp:1273:            LOGGER.e(0, "Ploidy other than diploid detected in " + error_promp);
Geno.cpp:1517:           LOGGER.e(0, "read to the end of the genotype file, but still didn't finish.");
Geno.cpp:1641:        LOGGER.e(0, "extracted marker larger than buffer.");
Geno.cpp:1672:            LOGGER.e(0, "inconsistent sample size in bgen file [" + geno_files[i] + "] to the input of --sample.");
Geno.cpp:1797:                    LOGGER.e(0, "decompress genotype data error in " + error_promp); 
Geno.cpp:1804:                    LOGGER.e(0, "not compressed by zstd in " + error_promp);
Geno.cpp:1807:                    LOGGER.e(0, "original size unknown in " + error_promp);
Geno.cpp:1811:                    LOGGER.e(0, "size stated in compressed data is different from " + error_promp);
Geno.cpp:1816:                    LOGGER.e(0, "decompress genotype error: " + string(ZSTD_getErrorName(dSize)) + " in " + error_promp);
Geno.cpp:1819:                LOGGER.e(0, "unknown compress format in " + error_promp);
Geno.cpp:1839:            LOGGER.e(0, "inconsistent number of sample in " + error_promp );
Geno.cpp:1843:            LOGGER.e(0, "multi alleles detected in " + error_promp);
Geno.cpp:1851:            LOGGER.e(0, "multi ploidy detected in " + error_promp);
Geno.cpp:1860:            LOGGER.e(0, "GCTA can't support phased data in " + error_promp);
Geno.cpp:1898:               LOGGER.e(0, "multiple alleles detected in " + error_promp);
Geno.cpp:2037:               LOGGER.e(0, "multiple alleles detected in " + error_promp);
Geno.cpp:2068:               LOGGER.e(0, "multiple alleles detected in " + error_promp);
Geno.cpp:2152:        LOGGER.e(0, message);
Geno.cpp:2189:        if(lag_index < 0)LOGGER.e(0, "strange index in " + to_string(curRawIndex) 
Geno.cpp:2197:            LOGGER.e(0, "read [" + geno_files[curFileID] + "] error.\nThere might be some problems in your storage, or have you changed the file?");
Geno.cpp:2355:            LOGGER.e(0, "read to the end of the BED file, but still didn't finish.");
Geno.cpp:2366:            LOGGER.e(0, "requested marker number exceed the buffer size.");
Geno.cpp:2377:            if(lag_index < 0)LOGGER.e(0, "strange index in " + to_string(curRawIndex) 
Geno.cpp:2382:                LOGGER.e(0, "read [" + geno_files[curFileID] + "] error.\nThere might be some problems in your storage, or have you changed the file?");
Geno.cpp:2509:            LOGGER.e(0, "open genotype [" + cur_filename + "], " + string(strerror(errno)));
Geno.cpp:2651:        if (!out) { LOGGER.e(0, "can not open the file [" + options["out"] + ".sum" + "] to write"); }
Geno.cpp:2814:            LOGGER.e(0, "decompress genotype data error in " + to_string(raw_index) + "th SNP."); 
Geno.cpp:2819:            LOGGER.e(0, "inconsistent number of sample in " + to_string(raw_index) + "th SNP." );
Geno.cpp:2823:            LOGGER.e(0, "multi alleles still detected, the bgen file might be malformed.");
Geno.cpp:2836:            LOGGER.e(0, "can't support phased data currently.");
Geno.cpp:2842:            LOGGER.e(0, "can't support probability bits other than in byte unit.");
Geno.cpp:2846:            LOGGER.e(0, "malformed data in " + to_string(raw_index) + "th SNP.");
Geno.cpp:2898:                    LOGGER.e(0, "multiple alleles detected in " + to_string(raw_index) + "th SNP.");
Geno.cpp:2943:                    LOGGER.e(0, "multiple alleles detected in " + to_string(raw_index) + "th SNP.");
Geno.cpp:2986:            LOGGER.e(0, err_string);
Geno.cpp:2993:            LOGGER.e(0, err_string);
Geno.cpp:3003:            LOGGER.e(0, err_string);
Geno.cpp:3285:            LOGGER.e(0, "read to the end of the BED file, but still didn't finish.");
Geno.cpp:3424:        LOGGER.e(0, "MAF can't be negative: " + to_string(val));
Geno.cpp:3444:        LOGGER.e(0, "MAF range: --max-maf can't be smaller than --min-maf");
Geno.cpp:3456:        LOGGER.e(0, "max MAF can't be negative or larger than 0.5");
Geno.cpp:3480:            LOGGER.e(0, "no " + key_name + " parameter found");
Geno.cpp:3484:            LOGGER.e(0, key_name + " " + options[key_store] + " not found");
Geno.cpp:3510:                LOGGER.e(0, "illegal value in --maf");
Geno.cpp:3513:                LOGGER.e(0, "--maf can't be smaller than 0 or larger than 0.5");
Geno.cpp:3519:            LOGGER.e(0, "multiple value in --maf, not supported currently");
Geno.cpp:3530:                LOGGER.e(0, "illegal value in --maf");
Geno.cpp:3533:               LOGGER.e(0, "--max-maf can't be smaller than 0 or larger than 0.5");
Geno.cpp:3536:            LOGGER.e(0, "multiple value in --maf, not supported currently");
Geno.cpp:3542:        LOGGER.e(0, "--maf can't be larger than --max-maf value");
Geno.cpp:3566:                LOGGER.e(0, "illegal value in " + flag);
Geno.cpp:3569:            LOGGER.e(0, "multiple value in " + flag + ", not supported currently.");
Geno.cpp:3628:                LOGGER.e(0, "can't recognize recode method: " + options_in["--recodet"][0]);
Geno.cpp:3802:    if (!osOut) { LOGGER.e(0, "can not open the file [" + name_out + "] to write."); }
Geno.cpp:3833:    if (!osOut) { LOGGER.e(0, "can not open the file [" + name_out + "] to write."); }
Geno.cpp:3994:            if (!o_freq) { LOGGER.e(0, "can not open the file [" + name_frq + "] to write"); }
LD.cpp:35:        LOGGER.e(0, "can't open " + options["out"] + " for writing.");
LD.cpp:106:            LOGGER.e(0, "can't write to " + options["out"] + ".");
LD.cpp:109:            LOGGER.e(0, "can't write to " + options["out"] + ".");
LD.cpp:171:                LOGGER.e(0, "LD window is not an integer.");
Marker.cpp:91:        LOGGER.e(0, "no marker exist");
Marker.cpp:119:        LOGGER.e(0, "0 SNP remained!");
Marker.cpp:129:        LOGGER.e(0, "can't open [" + filename + "] to read]");
Marker.cpp:413:    LOGGER.e(0, "too large SNP index " + to_string(raw_index));
Marker.cpp:451:                LOGGER.e(0, "can't read variant list file with " + to_string(ncol) + " columns, not a valid BIM file.");
Marker.cpp:471:                    LOGGER.e(0, "can't find enough essential columns in PVAR file.");
Marker.cpp:474:                LOGGER.e(0, "invaild PVAR file, should start with #CHROM.");
Marker.cpp:505:                LOGGER.e(0, "Line " + to_string(nHeader + i + 1) + " contains illegal distance value.");
Marker.cpp:542:        LOGGER.e(0, "invalid PVAR file.");
Marker.cpp:550:        LOGGER.e(0, "can not open the file [" + bim_file + "] to read");
Marker.cpp:567:            LOGGER.e(0, "the bim file [" + bim_file + "], line " + to_string(line_number)
Marker.cpp:579:            LOGGER.e(0, "Line " + to_string(line_number) + " of [" + bim_file +
Marker.cpp:588:            LOGGER.e(0, "Line " + to_string(line_number) + " of [" + bim_file +
Marker.cpp:621:        LOGGER.e(0, "can not open the file [" + gfile + "] to read");
Marker.cpp:634:        LOGGER.e(0, "invalid gene list file");
Marker.cpp:652:            LOGGER.e(0, "  line " + to_string(line_number)
Marker.cpp:659:            LOGGER.e(0, "  Line " + to_string(line_number) + " of [" + gfile +
Marker.cpp:669:           LOGGER.e(0, "  Line " + to_string(line_number) + " of [" + gfile +
Marker.cpp:698:                //LOGGER.e(0, " Line " + to_string(line_number) + ", chr information can't be found in the genotype");
Marker.cpp:740:        LOGGER.e(0, "bad magic number in the bgen file.");
Marker.cpp:747:        LOGGER.e(0, "strange header length, might be an invalid bgen.");
Marker.cpp:782:        LOGGER.e(0, "GCTA only support bgen version 1.2, 1.3. Use QCTOOLv2 to convert to new version.");
Marker.cpp:811:        LOGGER.e(0, "can't open index file: " + string(sqlite3_errmsg(db)) + 
Marker.cpp:821:        LOGGER.e(0, "bad index file: " + string(sqlite3_errmsg(db)) +
Marker.cpp:840:        LOGGER.e(0, "can't read bgen file [" + bgen_file + "], " + string(strerror(errno)));
Marker.cpp:845:        LOGGER.e(0, "can't read bgen file [" + bgen_file + "], " + string(strerror(errno)));
Marker.cpp:849:        LOGGER.e(0, "bad index file, first 1000 bytes aren't consistent."
Marker.cpp:855:        LOGGER.e(0, "bad index file, file size isn't consistent."
Marker.cpp:866:        LOGGER.e(0, "bad index file: " + string(sqlite3_errmsg(db)) +
Marker.cpp:881:        LOGGER.e(0, "bad index file, the indexed SNPs are different from bgen file."
Marker.cpp:893:        LOGGER.e(0, "bad index file: " + string(sqlite3_errmsg(db)) +
Marker.cpp:901:       LOGGER.e(0, "bad index file: " + string(sqlite3_errmsg(db)) +
Marker.cpp:924:        LOGGER.e(0, "bad index file: " + string(sqlite3_errmsg(db)) +
Marker.cpp:971:        LOGGER.e(0, string(sqlite3_errmsg(db)) + "\nBad index file, regenerate by " + prompt_index + ".");
Marker.cpp:991:            LOGGER.e(0, "The first variant in bgen file aren't consistent with index file."
Marker.cpp:996:            LOGGER.e(0, "The variants in bgen file aren't consistent with index file."
Marker.cpp:1066:        LOGGER.e(0, "Get Marker Params out of range.");
Marker.cpp:1076:        LOGGER.e(0, "can't open bgen file to read");
Marker.cpp:1096:        LOGGER.e(0, "strange header length, might be an invalid bgen.");
Marker.cpp:1131:        LOGGER.e(0, "GCTA only support bgen version 1.2, 1.3. Use QCTOOL to convert to new version.");
Marker.cpp:1135:        LOGGER.e(0, "Compress not by zlib is not supported currently");
Marker.cpp:1174:        //LOGGER.e(0, "test")
Marker.cpp:1225:        LOGGER.e(0, "0 SNP remain for further analysis.");
Marker.cpp:1314:       LOGGER.e(0, "0 SNP remain.");
Marker.cpp:1337:        LOGGER.e(0, "0 SNP remain.");
Marker.cpp:1406:            LOGGER.e(0, "the SNP list file [" + snplist_file + "], line " + to_string(line_number) +
Marker.cpp:1430:            LOGGER.e(0, "no " + key_name + " parameter found");
Marker.cpp:1434:            LOGGER.e(0, key_name + " " + options[key_store] + " not found");
Marker.cpp:1461:                LOGGER.e(0, "Invalid autosome number: " + options_in["--autosome-num"][0]);
Marker.cpp:1464:            LOGGER.e(0, "Multiple --autosome-num is not supported");
Marker.cpp:1486:                LOGGER.e(0, "Chromosome range has been fixed by --chr flag, however it was not in autosome range");
Marker.cpp:1502:                LOGGER.e(0, "Chromosome range has been fixed by --chr flag, however it was not in autosome range");
Marker.cpp:1521:                LOGGER.e(0, "--chr contains no numeric value");
Marker.cpp:1529:                LOGGER.e(0, "--chr contains no numeric value");
Marker.cpp:1532:            LOGGER.e(0, "multiple --chr is not supported currently");
Marker.cpp:1536:            LOGGER.e(0, "--chr is out of chromosome range");
Marker.cpp:1556:    LOGGER.e(0, "Marker has no main process this time");
OptionIO.cpp:20:            LOGGER.e(0, "no " + key_name + " parameter found");
OptionIO.cpp:23:            LOGGER.e(0, key_name + " " + options[key_store] + " not found");
OptionIO.cpp:37:            LOGGER.e(0, "no " + key_name + " parameter found");
OptionIO.cpp:85:            LOGGER.e(0, "no item in [" + list_filename + "].");
OptionIO.cpp:155:            LOGGER.e(0, "the number of fields in [" + fileName + "] is less than " + to_string(minFields) + ".");
OptionIO.cpp:169:                LOGGER.e(0, "the file [" + fileName + "] contains different number of elements in line " + to_string(line_number) + ".");
OptionIO.cpp:181:            LOGGER.e(0, "can't read [" + fileName + "].");
OptionIO.cpp:184:            LOGGER.e(0, "find blank line in header or can't find valid text data.");
OptionIO.cpp:186:            LOGGER.e(0, "text data is different from header.");
Pheno.cpp:73:        LOGGER.e(0, "no phenotype file presents");
Pheno.cpp:93:            LOGGER.e(0, "find duplicated items in phenotype data.");
Pheno.cpp:101:                LOGGER.e(0, "--mpheno isn't a numberic value");
Pheno.cpp:106:            LOGGER.e(0, "selected pheno column can't be less than 0 or larger than --pheno columns");
Pheno.cpp:121:            LOGGER.e(0, "find duplicated items in gender information.");
Pheno.cpp:142:        LOGGER.e(0, "find duplicated items in sample IDs.");
Pheno.cpp:191:        LOGGER.e(0, "0 individual remain for further analysis.");
Pheno.cpp:222:        LOGGER.e(0, "cann't read [" + sublist_file + "]");
Pheno.cpp:241:                LOGGER.e(0, err_file + " has less than 3 columns, first 2 columns should be FID, IID");
Pheno.cpp:254:                LOGGER.e(0, err_file + " has not enough column to read");
Pheno.cpp:258:                LOGGER.e(0, err_file + " has less than 2 columns.");
Pheno.cpp:262:        LOGGER.e(0, err_file + " is empty.");
Pheno.cpp:283:                LOGGER.e(0, err_file + ", line " + to_string(line_number) +
Pheno.cpp:351:            LOGGER.e(0, "GCTA requires all files with same sample information.");
Pheno.cpp:374:                LOGGER.e(0, "only find " + to_string(ncol) + " columns, invalid FAM file (at least 6).");
Pheno.cpp:389:            if(!foundIID) LOGGER.e(0, "can't find IID or #IID in header, invalid PSAM file.");
Pheno.cpp:393:            if(!found) LOGGER.e(0, "SEX column in PSAM file is essential to GCTA.");
Pheno.cpp:438:        LOGGER.e(0, "invalid PSAM file.");
Pheno.cpp:447:        LOGGER.e(0, "can not open sample file to read.");
Pheno.cpp:466:            LOGGER.e(0, "invalid sample file");
Pheno.cpp:469:        LOGGER.e(0, "invalid sample file");
Pheno.cpp:494:            LOGGER.e(0, "Line " + to_string(line_number + 3) + " has different number of columns.");
Pheno.cpp:512:        LOGGER.e(0, "can not open the file [" + fam_file + "] to read");
Pheno.cpp:524:            LOGGER.e(0, "the fam file [" + fam_file + "], line " + to_string(line_number)
Pheno.cpp:604:        LOGGER.e(0, "can't write to [" + filename + "].");
Pheno.cpp:966:            LOGGER.e(0, "--mpheno has to combine with --pheno");
Pheno.cpp:982:    LOGGER.e(0, "Phenotype has no main process this time");
main.cpp:148:                LOGGER.e(0, "Find multiple options: " + cur_string);
main.cpp:152:                LOGGER.e(0, "the option must start with \"--\": " + cur_string);
main.cpp:163:            LOGGER.e(0, "no output file name in the \"--out\" option");
main.cpp:168:        LOGGER.e(0, "missing the --out option");
main.cpp:194:                LOGGER.e(0, "can't get thread number from --thread-num option.");
main.cpp:197:            LOGGER.e(0, "can't set multiple thread number.");
main.cpp:204:            LOGGER.e(0,"can't set both --thread-num and --threads");
main.cpp:211:                LOGGER.e(0, "can't get thread number from --threads option.");
main.cpp:214:            LOGGER.e(0, "can't set multiple thread number.");
main.cpp:259:            LOGGER.e(0, "multiple main functions are not supported currently.");
main.cpp:297:        if(mains.size() > 1) LOGGER.e(0, "multiple main functions are not supported currently.");
main.cpp:309:            LOGGER.e(0, err_msg);
main.cpp:311:            LOGGER.e(0, string(err_msg));
