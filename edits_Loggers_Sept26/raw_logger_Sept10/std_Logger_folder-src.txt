Covar.cpp:611:        LOGGER << "template: " << samples.size() << std::endl;
Covar.cpp:618:        LOGGER << "X size: " << X.size() << std::endl;
Covar.cpp:622:                LOGGER << X[i + j * sample_index.size()] << " ";
Covar.cpp:624:            LOGGER << std::endl;
Covar.cpp:629:        LOGGER << "X size: " << X.size() << std::endl;
Covar.cpp:633:                LOGGER << X[i + j * sample_index.size()] << " ";
Covar.cpp:635:            LOGGER << std::endl;
FastFAM.cpp:94:    LOGGER << label << ": ";
FastFAM.cpp:96:        LOGGER << v[i] << " ";
FastFAM.cpp:98:    LOGGER << std::endl;
FastFAM.cpp:253:        //LOGGER << "geno address: " << static_cast<void *>(geno.data()) << std::endl;
FastFAM.cpp:254:        //LOGGER << "orig address: " << static_cast<void *>(rgen.data()) << std::endl;
FastFAM.cpp:317:        LOGGER << "Loading saved GLM model prefixed with [" << options["model_file"] << "]..." << std::endl;
FastFAM.cpp:318:        LOGGER << "Note: phenotype, covariates, sparse GRM and association test methods are provided by the model, thus these flags will be ignored." << std::endl;
FastFAM.cpp:334:        LOGGER << "  " << num_indi << " valid individuals to be included." << std::endl;
FastFAM.cpp:430:        LOGGER << "  loaded successfully." << std::endl;
FastFAM.cpp:435:        LOGGER << "Loading saved model prefixed with [" << options["model_file"] << "]..." << std::endl;
FastFAM.cpp:436:        LOGGER << "Note: phenotype, covariates, sparse GRM and association test methods are provided by the model, thus these flags will be ignored." << std::endl;
FastFAM.cpp:452:        LOGGER << "  " << num_indi << " valid individuals to be included." << std::endl;
FastFAM.cpp:483:        LOGGER << "  loading phenotypes..." << std::endl;
FastFAM.cpp:504:        LOGGER << "  loading covariates..." << std::endl;
FastFAM.cpp:520:            LOGGER << "  loading " << head.covarVec_cols << " covariates..." << std::endl;
FastFAM.cpp:536:            LOGGER << "  loading V matrix..." << std::endl;
FastFAM.cpp:572:        LOGGER << "  loaded successfully." << std::endl;
FastFAM.cpp:608:        LOGGER << "Use random seed: " << seed << std::endl;
FastFAM.cpp:821:    //LOGGER << "DEBUG: samples size: " << geno->pheno->count_keep() << std::endl;
FastFAM.cpp:888:                    LOGGER << "fastGWA-REML runtime: ";
FastFAM.cpp:890:                    LOGGER << "HE regression runtime: ";
FastFAM.cpp:892:                LOGGER << LOGGER.tp("HE") << " sec." << std::endl;
FastFAM.cpp:1011:        LOGGER << "Saving fastGWA model information..." << std::endl;
FastFAM.cpp:1020:        LOGGER << "Sample information has been saved to [" << id_file << "]." << std::endl;
FastFAM.cpp:1090:        LOGGER << "Model has been saved to [" << bin_file << "]." << std::endl;
FastFAM.cpp:1243:    LOGGER << "solve VinvY" << std::endl;
FastFAM.cpp:1256:    LOGGER << "sum beta" << std::endl;
FastFAM.cpp:1266:    LOGGER << "Get the sum beta" << std::endl;
FastFAM.cpp:1300:    LOGGER << "Fitting MCREML, logdet: " << logdet1 << " h2: " << hsq1 << std::endl;
FastFAM.cpp:1310:    LOGGER << "Fitting MCREML, logdet: " << logdet2 << " h2: " << hsq2 << std::endl;
FastFAM.cpp:1321:        LOGGER << "Fitting MCREML, logdet: " << logdet << std::endl;
FastFAM.cpp:1330:    LOGGER << "  Vg = " << h2 << std::endl;
FastFAM.cpp:1371:    LOGGER << "XtX:" << endl;
FastFAM.cpp:1372:    LOGGER << XtX << endl;
FastFAM.cpp:1384:    LOGGER << "beta:" << endl;
FastFAM.cpp:1385:    LOGGER << betas.transpose() << endl;
FastFAM.cpp:1388:    LOGGER << "SSE: " << sse << endl;
FastFAM.cpp:1391:    LOGGER << "SD: " << SDs.transpose() << endl;
FastFAM.cpp:1400:    LOGGER << "\nSource\tVariance\tSE" << std::endl;
FastFAM.cpp:1401:    LOGGER << "Vg\t" << hsq << "\t" << sqrt(SD) << std::endl;
FastFAM.cpp:1402:    LOGGER << "Ve\t" << Vpheno - hsq << std::endl;
FastFAM.cpp:1403:    LOGGER << "Vp\t" << Vpheno << std::endl;
FastFAM.cpp:1405:    LOGGER << "\nHeritability = " << hsq / Vpheno << " (Pval = " << p << ")" << std::endl;
FastFAM.cpp:1423:    //LOGGER << "Non zeros V: " << V.nonZeros() << std::endl;
FastFAM.cpp:1577:        LOGGER << "Iteration " << iter + 1 << ", step size: " << step << ", logL: " << max_logL
FastFAM.cpp:1590:        LOGGER << "\n" << "Up boundary detail: " << std::endl;
FastFAM.cpp:1591:        LOGGER << "  " << "iter\tstep\tstart\tend\tendNAN" << std::endl;
FastFAM.cpp:1592:        LOGGER << std::boolalpha;
FastFAM.cpp:1594:            LOGGER << "  " << iter << "\t" << steps[iter] << "\t" << starts[iter] << "\t" << ends[iter] << "\t" << bEndNAN[iter] << std::endl; 
FastFAM.cpp:1596:        LOGGER << std::endl;
FastFAM.cpp:1601:        LOGGER << "Best guess Vg " 
FastFAM.cpp:1610:        LOGGER << "Best guess Vg " 
FastFAM.cpp:1618:    LOGGER << "fastGWA-REML converged." << std::endl;
FastFAM.cpp:1621:    //LOGGER << "Estimated Vg: " << std::setprecision( std::numeric_limits<double>::digits10) << Vg << ", range: " << start << " to " << end << std::setprecision(ss) << std::endl;
FastFAM.cpp:1630:    LOGGER << "logL: " << logL << std::endl;
FastFAM.cpp:1632:    LOGGER <<"Sampling variance/covariance of the estimates of Vg and Ve:" << std::endl; 
FastFAM.cpp:1633:    LOGGER << Hinv << std::endl;
FastFAM.cpp:1635:    LOGGER << "\nSource\tVariance\tSE" << std::endl;
FastFAM.cpp:1636:    LOGGER << "Vg" << "\t" << varcomp[0] << "\t" << sqrt(Hinv(0, 0)) << std::endl;
FastFAM.cpp:1637:    LOGGER << "Ve" << "\t" << varcomp[1] << "\t" << sqrt(Hinv(1, 1)) << std::endl;
FastFAM.cpp:1638:    LOGGER << "Vp" << "\t" << Vp << std::endl;
FastFAM.cpp:1648:    LOGGER << "\nHeritability = " << Vg / Vp << " (Pval = " << p << ")" << std::endl;
FastFAM.cpp:1834:    //LOGGER << "TCG compute time: " << LOGGER.tp("TCG") << std::endl;
FastFAM.cpp:1839:    //LOGGER << "  time: " << LOGGER.tp("vi_y") << std::endl;
FastFAM.cpp:1854:        LOGGER << "Use seed: " << seed << std::endl;
FastFAM.cpp:1856:    //LOGGER << "Setting seed: " << seed << std::endl;
FastFAM.cpp:1895:    LOGGER << "  reading genotypes..." << std::endl; 
FastFAM.cpp:1929:                LOGGER << "Tuning of gamma finished at the " << i << "th SNP." << std::endl;
FastFAM.cpp:1945:    LOGGER << "Tuning of gamma finished " << LOGGER.tp("tuning") << " seconds." << std::endl;
FastFAM.cpp:1967:        LOGGER << "Saved grammar gamma residual to [" << options["out"] << ".fastGWA(.residual, .gamma)" << "]." << std::endl;
FastFAM.cpp:2285:        LOGGER << "fastGWA results will be saved in text format to [" << sFileName << "]." << std::endl;
FastFAM.cpp:2300:        LOGGER << "fastGWA results will be saved in binary format to [" << sFileName << "(.snpinfo, .bin)]" << std::endl;
FastFAM.cpp:2320:            LOGGER << "  Filtering out variants with MAF < 0.0001, customise it with --maf flag." << std::endl; 
FastFAM.cpp:2325:            LOGGER << "  Filtering out variants with imputation INFO score < 0.30, customise it with --info flag." << std::endl;
FastFAM.cpp:2330:            LOGGER << "  Filtering out variants with missingness rate > 0.10, customise it with --geno flag." << std::endl;
FastFAM.cpp:2366:    LOGGER << "Saved " << numMarkerOutput << " SNPs." << std::endl;
FastFAM.cpp:2716:                LOGGER << "Note: the sample ID (FID IID) in model has to exsit in genotype for further association step." << std::endl;
FastFAM.cpp:2756:    LOGGER << "fastGWA-BB results will be saved in text format to [" << sFileName << "]." << std::endl;
FastFAM.cpp:2775:        LOGGER << "Processing " << numGeneBlock << " genes by " << options["regiontest"] << " test..." << std::endl;
FastFAM.cpp:2781:        LOGGER << "  Filtering out variants with missingness rate > 0.10, customise it with --geno flag." << std::endl;
FastFAM.cpp:2997:    LOGGER << "Performing GLM to get the initial guess of beta..." << std::endl;
FastFAM.cpp:3001:    LOGGER << "GLM finished, fixed effects: " << est_a.transpose() << std::endl;
FastFAM.cpp:3014:    LOGGER << "Init Var(Y): " << varVector(Y) << std::endl;
FastFAM.cpp:3046:        LOGGER << "Init with tao: " << cur_tao << ", Var(Y): " << varVector(Y) << cur_tao << ", fixed effects: " << est_a.transpose() << "." << std::endl;
FastFAM.cpp:3079:        LOGGER << "------------------------------------" << std::endl;
FastFAM.cpp:3090:            LOGGER << "Fine tuning within " << startTao << " ~ " << endTao << " with " << trails[0] << " steps." << std::endl;
FastFAM.cpp:3103:            LOGGER << "Fine tuning within " << startTao << " ~ " << endTao << " with " << trails[0] << " steps." << std::endl;
FastFAM.cpp:3122:            LOGGER << "Mean tao in first 3 iterations: " << meanTao << ". Fine tuning within " << startTao << " ~ " << endTao << " ." << std::endl;
FastFAM.cpp:3140:            LOGGER << "Mean tao in past 3 iterations: " << meanTao << ". Fine tuning within " << startTao << " ~ " << endTao << " .\n" << std::endl;
FastFAM.cpp:3208:            LOGGER << "Iteration " << iter + 1 << ", step size: " << step << ", logL: " << max_logL
FastFAM.cpp:3212:                LOGGER << "\n" << "Up boundary detail: " << std::endl;
FastFAM.cpp:3213:                LOGGER << "  " << "iter\tstep\tstart\tend\tendNAN" << std::endl;
FastFAM.cpp:3214:                LOGGER << std::boolalpha;
FastFAM.cpp:3216:                    LOGGER << "  " << iter << "\t" << steps[iter] << "\t" << starts[iter] << "\t" << ends[iter] << "\t" << bEndNAN[iter] << std::endl; 
FastFAM.cpp:3218:                LOGGER << std::endl;
FastFAM.cpp:3253:        //LOGGER << "Tao value: " << cur_tao << ", Var(Y): " << varVector(Y) << std::endl;
FastFAM.cpp:3257:        LOGGER << "Iter " << curIter << ", tao: " << cur_tao << ", Var(Y): " << varVector(Y) << ", fixed effects: " << est_a.transpose() << "." << std::endl;
FastFAM.cpp:3276:            LOGGER << "fastGWA-GLM-REML stopped at a very small tao value." << std::endl;
FastFAM.cpp:3281:        LOGGER << "fastGWA-GLM-REML converged." << std::endl;
FastFAM.cpp:3343:    LOGGER << "Grid REML finished in " << LOGGER.tp("binREML") << " seconds." << std::endl;
FastFAM.cpp:3352:        LOGGER << "Saving fastGWA GLM model information..." << std::endl;
FastFAM.cpp:3361:        LOGGER << "Sample information has been saved to [" << id_file << "]." << std::endl;
FastFAM.cpp:3386:        LOGGER << "Model has been saved to [" << bin_file << "]." << std::endl;
FastFAM.cpp:3466:        LOGGER << "  reading " << nModelSNP << " SNP..." << std::endl; 
FastFAM.cpp:3491:            LOGGER << "Not enough null SNP, rerun." << std::endl;
FastFAM.cpp:3507:            LOGGER << "  gamma = " << c_inf << ", CV = " << cv << ", rerun " << std::endl;
FastFAM.cpp:3519:    LOGGER << "Tuning time: " << LOGGER.tp("tuning") << " seconds." << std::endl;
GRM.cpp:87:            LOGGER << "Get " << keep_lists.size() << " samples from list [" << options["keep_file"] << "]." << std::endl;
GRM.cpp:93:            LOGGER << "Get " << rm_lists.size() << " samples from list [" << options["remove_file"] << "]." << std::endl;
GRM.cpp:134:    LOGGER << common_id.size() << " samples have been read." << std::endl;
GRM.cpp:239:    LOGGER << common_id.size() << " samples have been read." << std::endl;
GRM.cpp:248:        LOGGER << ids[i].size() << " samples have been read." << std::endl;
GRM.cpp:255:        LOGGER << common_id.size() << " common samples in GRMs" << std::endl;
GRM.cpp:260:        LOGGER << keep_id.size() << " samples have been read." << std::endl;
GRM.cpp:267:        LOGGER << common_id.size() << " common samples after merging." << std::endl;
GRM.cpp:272:        LOGGER << remove_id.size() << " samples have been read." << std::endl;
GRM.cpp:283:        LOGGER << common_id.size() << " common samples after merging." << std::endl;
GRM.cpp:997:    //LOGGER << "count N" << std::endl;
GRM.cpp:1001:    //LOGGER << "marker block: " << numNblock << ", sample block:" << numNSampleBlock << ", MarkerPerN: " << markerPerN << std::endl;
GRM.cpp:1002:    //LOGGER << ", n: " << n << std::endl;
GRM.cpp:1428:    //LOGGER << "mtd weight: " << mtd_weight << std::endl;
GRM.cpp:1996:    LOGGER << "Computing GRM..." << std::endl;
GRM.cpp:1998:    LOGGER << "  Used " << numValidMarkers << " valid SNPs."<< std::endl;
GRM.cpp:2034:    LOGGER << "Computing GRM..." << std::endl;
GRM.cpp:2036:    LOGGER << numValidMarkers << " valid SNPs are included."<< std::endl;
Geno.cpp:243:        LOGGER << filterprompt << "." << std::endl;
Geno.cpp:248:        LOGGER << "Setting full dosage compensation mode." << std::endl;
Geno.cpp:252:        LOGGER << "Setting no dosage compensation mode." << std::endl;
Geno.cpp:366:        //LOGGER << "num_blocks: " << num_blocks << ", count extract: " << marker->count_extract() << std::endl;
Geno.cpp:433:        if(filterByMaf)LOGGER << "  " << extract_index.size() << " SNPs remain after MAF filtering." << std::endl;
Geno.cpp:755:                //LOGGER << "reading " << fileIndex << ", sample: " << rawCountSamples[fileIndex] << ", marker: " << rawCountSNPs[fileIndex] << std::endl;
Geno.cpp:796:        //LOGGER << "before: " << (void*)g_buf << std::endl;
Geno.cpp:1358:        //LOGGER << "dFilterMiss: " << dFilterMiss << "*" << nMissRate << ", info: " << dFilterInfo << "*" << info << ", " << std << std::endl; 
Geno.cpp:1559:        LOGGER << nFinishedMarker << " SNPs have been processed." << std::endl;
Geno.cpp:1872:        //LOGGER << "n_res: " << n_res << ", len_prob " << len_prob << ", bits " << (int)bits_prob << std::endl;
Geno.cpp:1883:                //LOGGER << "j:" << sindex << ", bits: " << start_bits << ", byte: " << start_bits / CHAR_BIT << std::endl;
Geno.cpp:1910:        //LOGGER << 2.0 * af * (1.0 - af) << "\t" << std << std::endl;
Geno.cpp:1924:        //LOGGER << to_string(i) + "After AF calculation" << std::endl;
Geno.cpp:1941:        //LOGGER << to_string(i) + "After filter" << std::endl;
Geno.cpp:1968:            //LOGGER << to_string(i) + "geno typed" << std::endl;
Geno.cpp:1978:            //LOGGER << to_string(i) + "after miss all done" << std::endl;
Geno.cpp:2195:            LOGGER << "Error index: " << i << ", raw index: " << curRawIndex << std::endl;
Geno.cpp:2196:            LOGGER << "Error buffer:" << static_cast<void *>(g_buf) << std::endl;
Geno.cpp:2404:    LOGGER << "1.gbuf size: " << bsize << ", mask size: " << msize << ", raw ct: " << rawCountSamples[0] << ", keep ct: " << gbuf->n_sample << ", nMarker: " << numMarker << std::endl;
Geno.cpp:2763:    LOGGER << "Old bgen 2 bed" << std::endl;
Geno.cpp:2781:    LOGGER << "samples: " << num_raw_sample << ", keep_sample: " << index_keep.size() << std::endl;
Geno.cpp:2782:    LOGGER << "Markers: " << num_markers << std::endl;
Geno.cpp:3264:    //LOGGER << "DEBUG num_finished_markers: " << num_finished_markers << std::endl;
Geno.cpp:3309:            LOGGER << "0. gbuf size: " << bsize << ", mask size: " << msize << ", raw ct: " << num_raw_sample << ", keep ct: " << num_keep_sample << ", nMarker: " << cur_num_marker_read << std::endl;
Geno.cpp:3732:        LOGGER << nFinishedMarker << " SNPs have been processed." << std::endl;
Geno.cpp:3791:        LOGGER << num_valid_marker_processed << " SNPs have been processed." << std::endl;
Geno.cpp:3809:    LOGGER << "Computing allele frequencies and saving to [" << name_out << "]..." << std::endl;
Geno.cpp:3823:    LOGGER << "Saved " << numMarkerOutput << " SNPs." << std::endl;
Geno.cpp:3839:    LOGGER << "Recoding genotypes and saving to [" << name_out << "]..." << std::endl;
Geno.cpp:3876:    LOGGER << "Saved " << numMarkerOutput << " SNPs." << std::endl;
Geno.cpp:4011:                //LOGGER << totalReadMarker << " SNPs read." << std::endl;
Marker.cpp:97:        LOGGER << "Get " << extractlist.size() << " SNPs from list [" << options["extract_file"] << "]." << std::endl;
Marker.cpp:103:        LOGGER << "Get " << excludelist.size() << " SNPs from list [" << options["exclude_file"] << "]." << std::endl;
Marker.cpp:678:                //LOGGER << temp_index << "\t" << (int)chr_item << "\t" << (int)chr[temp_index] << std::endl;
Marker.cpp:695:                //LOGGER << "gene " << curGeneName << " can not find, chr: " <<  int(chr_item) << std::endl;
Marker.cpp:879:    LOGGER << outputs << std::endl;
Marker.cpp:1004:        LOGGER << count_chr_error << " SNPs excluded due to filter on chromosome. " << std::endl;
Marker.cpp:1007:    LOGGER << "Total SNPs included: " << num_var_added  << "/" <<  num_marker << "." << std::endl;
Marker.cpp:1073:    LOGGER << "Extracting biallelic SNPs from bgen [" << bgen_file << "]..." << std::endl;
Marker.cpp:1084:    LOGGER << n_variants << " SNPs, ";
Marker.cpp:1087:    LOGGER << n_sample << " samples in the bgen file." << std::endl;
Marker.cpp:1104:    LOGGER << "bgen version ";
Marker.cpp:1107:            LOGGER << "1.1, ";
Marker.cpp:1110:            LOGGER << "1.2, ";
Marker.cpp:1113:            LOGGER << "unkown, ";
Marker.cpp:1117:            LOGGER << "no compress";
Marker.cpp:1120:            LOGGER << "compressed by zlib";
Marker.cpp:1123:            LOGGER << "compressed by zstd";
Marker.cpp:1126:            LOGGER << "unknown format";
Marker.cpp:1128:    LOGGER << "." << std::endl;
Marker.cpp:1138:    LOGGER << "Looking for bialleric allels..." << std::endl;
Marker.cpp:1173:        //LOGGER << options_i["start_chr"] << " " << options_i["end_chr"] << " " << (int)chr_item << " count_chr_error:" << count_chr_error << std::endl;
Marker.cpp:1221:    LOGGER << count_chr_error << " SNPs excluded due to filter on chromosome." << std::endl;
Marker.cpp:1222:    LOGGER << count_multi_alleles << " SNPs excluded due to multiple alleles." << std::endl; 
Pheno.cpp:78:        LOGGER << "Get " << keep_subjects.size() << " samples from list [" << options["keep_file"] << "]." << std::endl;
Pheno.cpp:84:        LOGGER << "Get " << remove_subjects.size() << " samples from list [" << options["remove_file"] << "]." << std::endl;
Pheno.cpp:133:    LOGGER << index_keep.size() << " individuals to be included. " << index_keep_male.size() << " males, " << index_keep_sex.size() - index_keep_male.size() << " females, " << index_keep.size() - index_keep_sex.size() <<" unknown." << std::endl;
Pheno.cpp:318:        LOGGER << "Checking other sample files..." << std::endl;
main.cpp:289:            LOGGER << key << " ";
main.cpp:291:                LOGGER << element << " ";
main.cpp:293:            LOGGER << std::endl;
main.cpp:331:        LOGGER << "Peak memory: " << mem << " GB; Virtual memory: " << vmem << " GB." << std::endl;
main.cpp:336:    LOGGER << "Overall computational time: " << time_str  <<  "." << std::endl;
