Covar.cpp:114:        LOGGER.i(0, "Reading quantitative covariates from [" + filename + "].");
Covar.cpp:119:        LOGGER.i(0, to_string(qcovar.size()) + " covariates of " + to_string(samples_qcovar.size()) + " samples to be included.");
Covar.cpp:124:        LOGGER.i(0, "Reading discrete covariates from [" + filename + "].");
Covar.cpp:129:        LOGGER.i(0, to_string(covar.size()) + " covariates of " + to_string(samples_covar.size()) + " samples to be included.");
Covar.cpp:135:        LOGGER.i(0, "Reading ranked covariates from [" + filename + "].");
Covar.cpp:140:        LOGGER.i(0, to_string(rcovar.size()) +  " covariates of " + to_string(samples_rcovar.size()) + " samples to be included.");
Covar.cpp:220:        LOGGER.i(0, to_string(qcovar.size()) + " qcovar, " + to_string(covar.size()) + " covar and " + to_string(rcovar.size()) + " rcovar to be included.");
Covar.cpp:226:    LOGGER.i(0, to_string(sample_id.size()) + " common samples in covariates to be included.");
Covar.cpp:543:            LOGGER.w(0, "inconsistent column number in line " + to_string(line_number) + " from " + err_string);
FastFAM.cpp:632:        LOGGER.i(0, to_string(remain_index.size()) + " overlapping individuals with non-missing data to be included from the covariate file(s).");
FastFAM.cpp:683:    LOGGER.i(0, "After matching all the files, " + to_string(remain_phenos.size()) + " individuals to be included in the analysis.");
FastFAM.cpp:718:            LOGGER.w(0, "" + to_string(num_remain_col - num_remain_col2) + " covariates which contained identical values were removed from further analyais.");
FastFAM.cpp:790:        LOGGER.i(0, "Fitting covariates jointly in association.");
FastFAM.cpp:840:                LOGGER.i(0, "Estimating the genetic variance (Vg) by " + mtdString[options["VgEstMethod"]] + "...");
FastFAM.cpp:843:                    LOGGER.i(0, "Use related pairs only.");
FastFAM.cpp:868:                        LOGGER.w(0, "  Forced to run fastGWA MLM");
FastFAM.cpp:876:                        LOGGER.w(0, "Constrain Vg to 0.");
FastFAM.cpp:880:                            LOGGER.w(0, "Vg larger than Vp");
FastFAM.cpp:883:                            LOGGER.w(0, "Constrain Vg to 0.99 * Vp: " + to_string(VG) + ".");
FastFAM.cpp:896:                LOGGER.w(0, "the estimate of Vg is not statistically significant. "
FastFAM.cpp:915:                    LOGGER.i(0, "Saving inverse of V for further analysis, use --load-inv for further analysis");
FastFAM.cpp:936:                    LOGGER.i(0, "The inverse has been saved to [" + options["out"] + ".grm.inv]");
FastFAM.cpp:940:                //LOGGER.i(0, "Performing GRAMMAR-gamma approximation...");
FastFAM.cpp:955:                LOGGER.w(0, "The estimate of Vg is not statistically significant. "
FastFAM.cpp:974:                LOGGER.i(0, to_string(cur_index) + " samples are checked identical in inverse V [" + id_file + "].");
FastFAM.cpp:981:            LOGGER.i(0, "Loading inverse of V from " + in_name + "...");
FastFAM.cpp:1005:            LOGGER.i(0, "Inverse of V loaded in " + to_string(LOGGER.tp("LOAD_INV")) + " seconds.");
FastFAM.cpp:1116:        LOGGER.w(0, "The covariate matrix has some similar or little information columns, however the results will not be affected mostly.");
FastFAM.cpp:1376:        LOGGER.w(0, "the XtX matrix is invertable.");
FastFAM.cpp:1399:    //LOGGER.i(2, "Vg = " + to_string(hsq) + ", se = " + to_string(sqrt(SD)) +  ", P = " + to_string(p));
FastFAM.cpp:1684:    LOGGER.i(2, "Vg = " + to_string(hsq) + ", se = " + to_string(se) +  ", P = " + to_string(p));
FastFAM.cpp:1697:    LOGGER.i(0, "Reading the sparse GRM file from [" + filename + "]...");
FastFAM.cpp:1702:    //LOGGER.i(0, "DEBUG: " + to_string(fam_index.size()) + " subjects remained");
FastFAM.cpp:1820:    LOGGER.i(0, "\nTuning parameters using " + to_string(num_marker_rand) + " null SNPs...");
FastFAM.cpp:1828:    //LOGGER.i(0, "Estimating conjugate gradient...");
FastFAM.cpp:1836:    //LOGGER.i(0, "Solving Vi * y via conjugate gradient...");
FastFAM.cpp:1937:    //LOGGER.i(0, "Got " + to_string(n_valid_null) + " null SNPs");
FastFAM.cpp:1944:    LOGGER.i(0, "Mean gamma = " + to_string(c_inf));
FastFAM.cpp:1973:    LOGGER.i(0, "\nInverting the variance-covarinace matrix via " + options["inv_method"] + " (This may take a long time)...");
FastFAM.cpp:1974:    //LOGGER.i(0, "DEUBG: Inverse Threads " + to_string(Eigen::nbThreads()));
FastFAM.cpp:1977:    //LOGGER.i(0, "FAM " + to_string(fam.rows()) + " * " + to_string(fam.cols()));
FastFAM.cpp:2000:    LOGGER.i(0, "Inverted in " + to_string(LOGGER.tp("INVERSE_FAM")) + " sec.");
FastFAM.cpp:2711:                LOGGER.i(0, "Use --load-inv to load the inversed file for fastGWA");
FastFAM.cpp:2715:                LOGGER.i(0, "Use \"--load-model " + options["out"] + "\" to load the model for further analysis.");
FastFAM.cpp:2725:                    LOGGER.i(0, "\nPerforming fastGWA generalized linear mixed model association analysis...");
FastFAM.cpp:2729:                        LOGGER.i(0, "\nPerforming fastGWA mixed model association analysis (extact test)...");
FastFAM.cpp:2732:                        LOGGER.i(0, "\nPerforming fastGWA mixed model association analysis...");
FastFAM.cpp:2737:                LOGGER.i(0, "\nPerforming fastGWA linear regression analysis...");
FastFAM.cpp:2769:    LOGGER.i(0, "Reading gene list file from [" + gfile + "]...");
FastFAM.cpp:2892:            LOGGER.i(1, ss.str());
FastFAM.cpp:2901:    LOGGER.i(0, ss.str());
FastFAM.cpp:2999:        LOGGER.w(0, "GLM didn't reach convergence");
FastFAM.cpp:3278:            LOGGER.w(0, "fastGWA-GLM-REML didn't converge, pay attention to the results, they mostly work OK.");
FastFAM.cpp:3422:    LOGGER.i(0, "\nTuning parameters using null SNPs...");  
FastFAM.cpp:3518:    LOGGER.i(0, "Mean gamma = " + to_string(c_inf));
FastFAM.cpp:3537:    //LOGGER.i(0, "Got " + to_string(n_valid_null) + " null SNPs");
GRM.cpp:132:    LOGGER.i(0, "Reading [" + files[0] + ".grm.id]...");
GRM.cpp:135:    LOGGER.i(0, "Reading [" + files[1] + ".grm.id]...");
GRM.cpp:142:    LOGGER.i(2, "Saving " + to_string(common_id.size()) + " individual IDs");
GRM.cpp:176:    LOGGER.i(0, "Subtracting GRMs...");
GRM.cpp:197:    LOGGER.i(0, "Subtracted GRM has been written to [" + out_file + ".grm.bin, .grm.N.bin].");
GRM.cpp:237:    LOGGER.i(0, "Reading [" + files[0] + ".grm.id]...");
GRM.cpp:246:        LOGGER.i(0, "Reading [" + cur_file + "]...");
GRM.cpp:258:        LOGGER.i(0, "Keeping samples in [" + options["keep_file"] + "]...");
GRM.cpp:270:        LOGGER.i(0, "Excluding samples in [" + options["remove_file"] + "]...");
GRM.cpp:306:        LOGGER.i(0, "Unified indididual IDs have been saved to [" + id_file_name + "].");
GRM.cpp:309:    LOGGER.i(0, "Writing unified GRM in binary format...");
GRM.cpp:371:        LOGGER.i(0, "GRM has been written to [" + wfile_name + "].");
GRM.cpp:377:    LOGGER.i(0, "Pruning the GRM to sparse with a cut off of " + to_string(thresh) + "...");
GRM.cpp:378:    LOGGER.i(0, "Total number of parts to proceed: " + to_string(index_grm_pairs.size()));
GRM.cpp:398:    LOGGER.i(2, "Saving " + to_string(keep_ID.size()) + " individual IDs");
GRM.cpp:420:            LOGGER.i(2, "Processing part " + to_string(part_index + 1));
GRM.cpp:480:        LOGGER.i(0, "Saving GRM sparse (" + to_string(rm_grm.size()) + " pairs) to [" + options["out"] + ".grm.sp]");
GRM.cpp:488:        LOGGER.i(0, "Success:", "make GRM sparse finished");
GRM.cpp:491:        LOGGER.i(0, "GRM has been saved to [" + options["out"] + ".grm.bin]");
GRM.cpp:502:            LOGGER.w(0, "Read GRM N failed between line " + to_string(index_grm_pairs[part_index].first + 1) + " and "
GRM.cpp:504:            LOGGER.i(0, "Stop prune the GRM N");
GRM.cpp:508:            LOGGER.i(2, "Processing part " + to_string(part_index + 1));
GRM.cpp:535:    LOGGER.i(0, "GRM N has been saved to [" + options["out"] + ".grm.N.bin]");
GRM.cpp:541:    LOGGER.i(0, "Pruning the GRM with a cutoff of " + to_string(thresh) + "...");
GRM.cpp:542:    LOGGER.i(0, "Total number of parts to proceed: " + to_string(index_grm_pairs.size()));
GRM.cpp:577:            LOGGER.i(2, "Processing part " + to_string(part_index + 1));
GRM.cpp:604:        LOGGER.i(0, "Related family pairs have been saved to " + options["out"] + ".family.txt");
GRM.cpp:648:    LOGGER.i(0, "After pruning the GRM, there are " + to_string(keep_ID.size()) + " individuals (" + to_string(removed_ID.size()) + " individuals removed).");
GRM.cpp:652:        LOGGER.i(2, "Pruned unrelated IDs have been saved to " + options["out"] + ".grm.id");
GRM.cpp:658:        LOGGER.i(2, "Pruned singleton IDs has been saved to " + options["out"] + ".singleton.txt");
GRM.cpp:666:    LOGGER.i(0, "Pruning GRM values, total parts " + std::to_string(index_grm_pairs.size()));
GRM.cpp:675:    LOGGER.i(2, "GRM values has been saved to [" + options["out"] + ".grm.bin]");
GRM.cpp:677:    LOGGER.i(0, "Pruning number of SNPs to calculate GRM, total parts " + std::to_string(index_grm_pairs.size()));
GRM.cpp:680:        LOGGER.w(2, "There is no [" + grm_file + ".grm.N.bin]");
GRM.cpp:685:        LOGGER.w(2, "can't open [" + options["out"] + ".grm.N.bin] to write, ignore this step");
GRM.cpp:692:    LOGGER.i(2, "Number of SNPs has been saved to [" + options["out"] + ".grm.N.bin]");
GRM.cpp:706:            LOGGER.i(2, "Processing part " + to_string(part_index + 1));
GRM.cpp:752:        LOGGER.w(0, "can not divide into " + to_string(num_parts) + ". Use " + to_string(parts.size()) + " instead.");
GRM.cpp:827:        LOGGER.w(0, "can not run in " + to_string(num_thread) + " threads. Use " + to_string(thread_parts.size()) + " instead");
GRM.cpp:847:    LOGGER.i(0, com_string);
GRM.cpp:848:    LOGGER.i(0, "Subset " + to_string(part) + "/" + to_string(num_parts) + ", no. subject " + to_string(part_keep_indices.first + 1) + "-" + to_string(part_keep_indices.second + 1));
GRM.cpp:849:    LOGGER.i(1, to_string(num_individual) + " samples, " + to_string(marker->count_extract()) + " markers, " + to_string(num_grm) + " GRM elements");
GRM.cpp:875:    LOGGER.i(0, "IDs for the GRM file has been saved in the file [" + o_grm_id + "]");
GRM.cpp:1331:    //LOGGER.i(0, out_message.str() + "% has been finished");
GRM.cpp:1357:    LOGGER.i(0, "The GRM computation is completed.");
GRM.cpp:1363:        LOGGER.i(0, "Saving sparse GRM with a cutoff " + to_string(thresh) + "...");
GRM.cpp:1365:        LOGGER.i(0, "Saving GRM...");
GRM.cpp:1514:        LOGGER.i(0, "GRM has been saved in the file [" + o_name + ".grm.bin]");
GRM.cpp:1515:        LOGGER.i(0, "Number of SNPs in each pair of individuals has been saved in the file [" + o_name + ".grm.N.bin]");
GRM.cpp:1517:        LOGGER.i(0, "GRM has been saved in the file [" + o_name + ".grm.sp]");
GRM.cpp:2048:            LOGGER.i(0, "Note: GRM is computed using the SNPs on the autosome.");
GRM.cpp:2057:            LOGGER.i(0, "Note: This function takes X chromosome as non PAR region.");
Geno.cpp:316:        LOGGER.i(0, "Computing allele frequencies...");
Geno.cpp:367:        LOGGER.i(0, to_string(extract_index.size()) + " SNPs remain from --maf or --max-maf,  ");
Geno.cpp:386:        LOGGER.i(0, "Reading frequencies from [" + alleleFileName + "]...");
Geno.cpp:418:        LOGGER.i(0, "Frequencies of " + to_string(AFA1.size()) + " SNPs are updated.");
Geno.cpp:454:    LOGGER.i(0, "Saving allele frequencies...");
Geno.cpp:466:    LOGGER.i(0, "Allele frequencies of " + to_string(AFA1.size()) + " SNPs have been saved in the file [" + name_frq + "]");
Geno.cpp:517:        LOGGER.i(0, "BED file(s) check OK.");
Geno.cpp:1549:                   LOGGER.i(1, ss.str());
Geno.cpp:1558:        LOGGER.i(1, ss.str());
Geno.cpp:2791:        //LOGGER.i(0, to_string(index) + "NUM_thread: " + to_string(omp_get_max_threads()));
Geno.cpp:2949:        //LOGGER.i(0, "MIDDLE: " + to_string(index) + "NUM_thread: " + to_string(omp_get_max_threads()));
Geno.cpp:2956:        //LOGGER.i(0, "Finished " + to_string(index) + "NUM_thread: " + to_string(omp_get_max_threads()));
Geno.cpp:2968:                LOGGER.i(1, ss.str());
Geno.cpp:3258:        LOGGER.i(0, "Reading PLINK BED file(s) in SNP-major format...");
Geno.cpp:3281:        //LOGGER.i(0, "time get buffer: " + to_string(LOGGER.tp("LOOP_GENO_PRE")));
Geno.cpp:3338:                LOGGER.i(1, ss.str());
Geno.cpp:3346:        LOGGER.i(1, ss.str());
Geno.cpp:3478:            LOGGER.w(0, "Geno: multiple " + key_name + ", use the first one only" );
Geno.cpp:3583:            LOGGER.w(0, "--freq should not follow by other parameters, if you want to calculate in founders only, "
Geno.cpp:3596:            LOGGER.w(0, "--freq should not follow by other parameters, if you want to calculate in founders only, "
Geno.cpp:3723:                    LOGGER.i(1, ss.str());
Geno.cpp:3731:        LOGGER.i(1, ss.str());
Geno.cpp:3782:                    LOGGER.i(1, ss.str());
Geno.cpp:3790:        LOGGER.i(1, ss.str());
Geno.cpp:3971:                LOGGER.i(0, "Computing allele frequencies...");
Geno.cpp:4028:            LOGGER.i(0, "Allele frequencies of " + to_string(nValidMarker) + " SNPs have been saved in the file [" + name_frq + "]");
Geno.cpp:4094:                LOGGER.i(0, "Computing allele frequencies...");
Geno.cpp:4111:            LOGGER.i(0, "Saving genotype to PLINK format [" + filename + ".bed]...");
Geno.cpp:4115:            LOGGER.i(0, "Genotype has been saved.");
Geno.cpp:4125:            LOGGER.i(0, "Converting bgen to PLINK format [" + filename + ".bed]...");
Geno.cpp:4127:            LOGGER.i(0, "Genotype has been saved.");
Geno.cpp:4136:            LOGGER.i(0, "Summing genotype in with sex"); 
Geno.cpp:4139:            LOGGER.i(0, "Summary has bee saved.");
LD.cpp:195:            LOGGER.i(0, "Generating LD matrix...");
Marker.cpp:109:        LOGGER.i(0, "Reading reference alleles of SNPs from [" + options["update_ref_allele_file"] + "]...");
Marker.cpp:115:        LOGGER.i(0, to_string(index_extract.size()) + " reference alleles are updated."); 
Marker.cpp:210:        LOGGER.w(0, to_string(rm_snps) + " SNPs are removed due to mismatching SNP name or alleles.");
Marker.cpp:418:    LOGGER.i(0, "Saving SNP information to [" + filename + "]...");
Marker.cpp:425:    LOGGER.i(0, to_string(index_extract.size()) + " SNPs saved.");
Marker.cpp:430:    LOGGER.i(0, "Reading PLINK2 PVAR file from [" + pvar_file + "]...");
Marker.cpp:530:        LOGGER.i(0, to_string(num_marker) + " SNPs to be included from PVAR file(s).");
Marker.cpp:532:            LOGGER.i(0, to_string(num_extract) + " SNPs to be included from valid chromosome number");
Marker.cpp:547:    LOGGER.i(0, "Reading PLINK BIM file from [" + bim_file + "]...");
Marker.cpp:571:            LOGGER.w(0, "the bim file [" + bim_file + "], line " + to_string(line_number) +
Marker.cpp:605:    LOGGER.i(0, to_string(num_marker) + " SNPs to be included from BIM file(s).");
Marker.cpp:607:        LOGGER.i(0, to_string(num_extract) + " SNPs to be included from valid chromosome number");
Marker.cpp:786:        LOGGER.w(0, "GCTA reads sample information from '--sample' inputs, but ignore the built-in sample data.");
Marker.cpp:805:    LOGGER.i(0, "Loading bgen index from [" + index_fname + "]...");
Marker.cpp:906:        LOGGER.w(0, "None variant with bialleric SNPs.");
Marker.cpp:919:    LOGGER.i(0, to_string(n_variants) + " SNPs to be included from bgen index file.");
Marker.cpp:1220:    LOGGER.i(0, to_string(num_marker) + " SNPs to be included from bgen file.");
Marker.cpp:1296:   if(numDup != 0) LOGGER.w(0, to_string(numDup) + " duplicated SNPs were ignored in the list." );
Marker.cpp:1317:   LOGGER.i(0, string("After ") + (isExtract? "extracting" : "excluding") +  " SNP, " +  to_string(num_extract) + " SNPs remain.");
Marker.cpp:1411:            LOGGER.w(0, "the SNP list file [" + snplist_file + "], line " + to_string(line_number) +
Marker.cpp:1428:            LOGGER.w(0, "Marker: multiple " + key_name + ", use the first one only" );
Marker.cpp:1498:            LOGGER.w(0, "One of the chromosome filter has been applied, it has been overrided by --autosome-x-y");
Marker.cpp:1514:            LOGGER.w(0, "One of the CHR filter has been applied, it has been overrided by --chr");
Marker.cpp:1544:            LOGGER.w(0, "One of the CHR filter has been applied, it has been overrided by --chrx");
OptionIO.cpp:18:            LOGGER.w(0, "There are multiple " + key_name + ". Only the first item will be used in the analysis." );
OptionIO.cpp:35:            LOGGER.w(0, "There are multiple " + key_name + ". Only the first item will be used in the analysis." );
OptionIO.cpp:65:            //LOGGER.i(0, to_string(m_files.size()) + " unique items in [" + list_filename + "].");
OptionIO.cpp:171:                LOGGER.w(0, "the file [" + fileName + "] contains more number of elements in line " + to_string(line_number) + ".");
Pheno.cpp:90:        LOGGER.i(0, "Reading phenotype data from [" + options["qpheno_file"] + "]...");
Pheno.cpp:112:        LOGGER.i(0, to_string(index_keep.size()) + " overlapping individuals with non-missing data to be included from the phenotype file.");
Pheno.cpp:118:        LOGGER.i(0, "Reading gender information from [" + options["sex_file"] + "]...");
Pheno.cpp:125:        LOGGER.i(0, to_string(index_keep.size()) + " individuals with valid sex information to be included from the phenotype file.");
Pheno.cpp:182:    LOGGER.i(0, to_string(new_index.size()) + " individuals have gender information.");
Pheno.cpp:277:            LOGGER.w(0, errmsg);
Pheno.cpp:347:                LOGGER.w(0, "Sample file [" + mfiles[i] + "] is different from the first file.");
Pheno.cpp:353:            LOGGER.i(1, "All files checked OK.");
Pheno.cpp:359:    LOGGER.i(0, "Reading PLINK sample file from [" + psam_file + "]...");
Pheno.cpp:435:        LOGGER.i(0, to_string(num_ind) + " individuals to be included from the sample file.");
Pheno.cpp:444:    LOGGER.i(0, "Reading oxford sample information file from [" + sample_file + "]...");
Pheno.cpp:503:    LOGGER.i(0, to_string(num_ind) + " individuals to be included from the sample file.");
Pheno.cpp:509:    LOGGER.i(0, "Reading PLINK FAM file from [" + fam_file + "]...");
Pheno.cpp:528:            LOGGER.w(0, "the fam file [" + fam_file + "], line " + to_string(line_number) + " have different elements");
Pheno.cpp:545:    LOGGER.i(0, to_string(num_ind) + " individuals to be included from FAM file.");
Pheno.cpp:601:    LOGGER.i(0, "Saving individual information to [" + filename + "]...");
Pheno.cpp:609:    LOGGER.i(0, to_string(index_keep.size()) + " individuals have been saved.");
Pheno.cpp:669:        LOGGER.w(0, to_string(nDup) + " duplicated samples were ignored in the list.");
Pheno.cpp:687:    LOGGER.i(0, string("After ") + (isKeep?"keeping":"removing") +  " individuals, " + to_string(keeps.size()) + " subjects remain.");
main.cpp:286:        LOGGER.i(0, "Options: ");
main.cpp:287:        LOGGER.i(0, " ");
main.cpp:295:        LOGGER.i(0, "");
main.cpp:299:            LOGGER.i(0, "The program will be running on up to " + std::to_string(thread_num) + " threads.");
main.cpp:315:    LOGGER.i(0, "");
main.cpp:317:    LOGGER.i(0,  "at " + getLocalTime(), "Analysis finished");
