CommFunc.cpp:51:    if (prob < 0 || prob > 1) LOGGER.e(0, "Requested quantile probability is invalid");
CommFunc.cpp:138:    if(!ifile) LOGGER.e(0, "can not open the file ["+filename+"] to read.");
StatFunc.cpp:33:    if (x < 0.0 || x > 1.0) LOGGER.e(0, "Bad x in routine betai!");
StatFunc.cpp:101:    if (x < 0.0 || a <= 0.0) LOGGER.e(0, "Invalid arguments in routine gammp");
StatFunc.cpp:120:        if (x < 0.0) LOGGER.e(0, "x less than 0 in routine gser");
StatFunc.cpp:135:        LOGGER.e(0, "a too large, ITMAX too small in routine gser");
StatFunc.cpp:164:    if (i > ITMAX) LOGGER.e(0, "a too large, ITMAX too small in gcf");
StatFunc.cpp:180:    if (size < 2) LOGGER.e(0, "Invalid size! StatFunc::gasdev_seq");
StatFunc.cpp:226:    if (a >= b) LOGGER.e(0, "b must larger than a! StatFunc::UniformDev");
StatFunc.cpp:271:    else LOGGER.e(0, "Invalid degree of freedom! StatFunc::chidev");
StatFunc.cpp:414:    if (Size <= 1) LOGGER.e(0, "Invalid size! StatFunc::ControlFDR");
StatFunc.cpp:559:    if (h == 0.0) LOGGER.e(0, "Bad xa input to routine splint");
StrFunc.cpp:99:	if(Pos>=SizeA) LOGGER.e(0, "Invalid Pos! StrFunc::StrVecEqual");
bivar_reml.cpp:45:                LOGGER.e(0, "REML bivar can't handle different sample size in --mgrm currently. \n"
bivar_reml.cpp:80:    if (_n < 1) LOGGER.e(0, "no individuals are in common in the input files.");
bivar_reml.cpp:120:    if (!(fabs(_y_Ssq) < 1e30)) LOGGER.e(0, "the phenotypic variance for trait 1 is infinite. Please check the missing data in your phenotype file. Missing values should be represented by \"NA\" or \"-9\".");
bivar_reml.cpp:123:    if (!(fabs(_y2_Ssq) < 1e30)) LOGGER.e(0, "the phenotypic variance for trait 2 is infinite. Please check the missing data in your phenotype file. Missing values should be represented by \"NA\" or \"-9\".");
bivar_reml.cpp:144:    //if(flag_CC2!=_flag_CC) LOGGER.e(0, "for a bivariate analysis, the two traits should be both quantitative or both binary.");
bivar_reml.cpp:361:        if (!comput_inverse_logdet_LU_mkl(Vi, logdet)) LOGGER.e(0, "the variance-covaraince matrix V is not invertible.");
bivar_reml.cpp:367:            if(_reml_have_bend_A) LOGGER.e(0, errmsg);
bivar_reml.cpp:504:        else LOGGER.e(0, "unable to calcuate the genetic correlation because one of the genetic variance components is negative.");
bivar_reml.cpp:518:            else LOGGER.e(0, errmsg);
bivar_reml.cpp:522:            else LOGGER.e(0, errmsg);
bivar_reml.cpp:526:            else LOGGER.e(0, errmsg);
data.cpp:94:    if (!Fam) LOGGER.e(0, "can not open the file [" + famfile + "] to read.");
data.cpp:137:        if (size == _id_map.size()) LOGGER.e(0, "Duplicate individual ID found: \"" + _fid[i] + "\t" + _pid[i] + "\".");
data.cpp:149:    if (!Bim) LOGGER.e(0, "can not open the file [" + bimfile + "] to read.");
data.cpp:213:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:214:    if (_keep.size() == 0) LOGGER.e(0, "No individual is retained for analysis.");
data.cpp:226:    if (!BIT) LOGGER.e(0, "can not open the file [" + bedfile + "] to read.");
data.cpp:237:            if (!BIT) LOGGER.e(0, "problem with the BED file ... has the FAM/BIM file been changed?");
data.cpp:371:        LOGGER.e(0, "Can not open the file [" + bfile_list + "] to read.");
data.cpp:389:    if(!Fam) LOGGER.e(0, "Can not open the file [" + famfile + "] to read.");
data.cpp:466:            if (size == _id_map.size()) LOGGER.e(0, "Duplicate individual ID found: " + _fid[i] + " " + _pid[i] + ".");
data.cpp:479:                if(fa_id_buf[i] != _fa_id[indx]) LOGGER.e(0, "Inconsistent paternal ID found, " + fid_buf[i] + " " + pid_buf[i] + ", from [" + famfile + "].");
data.cpp:480:                if(mo_id_buf[i] != _mo_id[indx]) LOGGER.e(0, "Inconsistent maternal ID found, " + fid_buf[i] + " " + pid_buf[i] + ", from [" + famfile + "].");
data.cpp:481:                if(sex_buf[i] != _sex[indx]) LOGGER.e(0, "Inconsistent gender found, " + fid_buf[i] + " " + pid_buf[i] + ", from [" + famfile + "].");
data.cpp:482:                if(pheno_buf[i] != _pheno[indx]) LOGGER.e(0, "Inconsistent phenotype found, " + fid_buf[i] + " " + pid_buf[i] + ", from [" + famfile + "].");
data.cpp:483:                if(i!=indx) LOGGER.e(0, "Inconsistent orders of individuals found from [" + famfile + "]. Please make sure that the orders of individuals are the same across the fam files.");
data.cpp:486:                LOGGER.e(0, "Unexpected individual ID found, " + fid_buf[i] + " " + pid_buf[i] + ", from [" + famfile + "].");
data.cpp:530:    if(!Bim) LOGGER.e(0, "Can not open the file [" + bimfile + "] to read.");
data.cpp:627:    if(!BIT) LOGGER.e(0, "Can not open the file [" + bedfile + "] to read.");
data.cpp:642:            if (!BIT) LOGGER.e(0, "Problem with the BED file ... has the FAM/BIM file been changed?");
data.cpp:669:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:670:    if (_keep.size() == 0) LOGGER.e(0, "No individual is retained for analysis.");
data.cpp:712:    if (!zinf.is_open()) LOGGER.e(0, "can not open the file [" + zinfofile + "] to read.");
data.cpp:721:    if (col_num < 7) LOGGER.e(0, errmsg);
data.cpp:722:    if (vs_buf[6] != "Rsq") LOGGER.e(0, errmsg);
data.cpp:733:        if (!(ss >> c_buf)) LOGGER.e(0, nerr);
data.cpp:735:        if (!(ss >> c_buf)) LOGGER.e(0, nerr);
data.cpp:737:        for (i = 0; i < 4; i++) if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:758:    if(infofile.substr(infofile.length()-3,3)==".gz") LOGGER.e(0, "the --dosage-mach option doesn't support gz file any more. Please check --dosage-mach-gz option.");
data.cpp:762:    if (!inf.is_open()) LOGGER.e(0, "can not open the file [" + infofile + "] to read.");
data.cpp:771:    if (col_num < 7) LOGGER.e(0, errmsg);
data.cpp:772:    if (vs_buf[6] != "Rsq" && vs_buf[6] != "Rsq_hat") LOGGER.e(0, errmsg);
data.cpp:782:        if (!(ss >> c_buf)) LOGGER.e(0, nerr);
data.cpp:784:        if (!(ss >> c_buf)) LOGGER.e(0, nerr);
data.cpp:786:        for (i = 0; i < 3; i++) if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:803:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:811:    if (!zinf.is_open()) LOGGER.e(0, "can not open the file [" + zdosefile + "] to read.");
data.cpp:840:            if (vs_buf[0].empty()) LOGGER.e(0, "family ID of the individual [" + str_buf + "] is missing.");
data.cpp:904:    if (_keep.size() == 0) LOGGER.e(0, "No individual is retained for analysis.");
data.cpp:913:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:914:    if(dosefile.substr(dosefile.length()-3,3)==".gz") LOGGER.e(0, "the --dosage-mach option doesn't support gz file any more. Please check --dosage-mach-gz option.");
data.cpp:921:    if (!idose) LOGGER.e(0, "can not open the file [" + dosefile + "] to read.");
data.cpp:949:            if (vs_buf[0].empty()) LOGGER.e(0, "family ID of the individual [" + str_buf + "] is missing.");
data.cpp:1010:    if (_keep.size() == 0) LOGGER.e(0, "No individual is retained for analysis.");
data.cpp:1030:    if (!zinf.is_open()) LOGGER.e(0, "can not open the file [" + zinfofile + "] to read.");
data.cpp:1038:        if (!(ss >> i_buf)) LOGGER.e(0, nerr);
data.cpp:1040:        if (!(ss >> str_buf)) LOGGER.e(0, nerr);
data.cpp:1042:        if (!(ss >> i_buf)) LOGGER.e(0, nerr);
data.cpp:1044:        if (!(ss >> c_buf)) LOGGER.e(0, nerr);
data.cpp:1046:        if (!(ss >> c_buf)) LOGGER.e(0, nerr);
data.cpp:1048:        if (!(ss >> str_buf)) LOGGER.e(0, nerr);
data.cpp:1049:        if (!(ss >> str_buf)) LOGGER.e(0, nerr);
data.cpp:1050:        if (!(ss >> str_buf)) LOGGER.e(0, nerr);
data.cpp:1051:        if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:1052:        if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:1053:        if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:1055:        if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:1056:        if (!(ss >> f_buf)) LOGGER.e(0, nerr);
data.cpp:1057:        if (ss >> f_buf) LOGGER.e(0, nerr);
data.cpp:1072:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:1083:    if (!zinf.is_open()) LOGGER.e(0, "can not open the file [" + zdosefile + "] to read.");
data.cpp:1121:            LOGGER.e(0, errmsg.str());
data.cpp:1148:    if (!OutBed) LOGGER.e(0, "can not open the file [" + OutBedFile + "] to write.");
data.cpp:1190:    if (!Fam) LOGGER.e(0, "can not open the fam file " + famfile + " to save!");
data.cpp:1204:    if (!Bim) LOGGER.e(0, "can not open the file [" + bimfile + "] to write.");
data.cpp:1268:    if (!i_snplist) LOGGER.e(0, "can not open the file [" + snplistfile + "] to read.");
data.cpp:1290:    if (_include.empty()) LOGGER.e(0, "can not find the SNP [" + snpname + "] in the data.");
data.cpp:1301:    if(iter==_snp_name_map.end()) LOGGER.e(0, "can not find the SNP [" + snpname + "] in the data.");
data.cpp:1310:    if(snplist.empty()) LOGGER.e(0, "on SNP found in this region.");
data.cpp:1324:    if(snplist.empty()) LOGGER.e(0, "on SNP found in this region.");
data.cpp:1345:    if(iter==_snp_name_map.end()) LOGGER.e(0, "can not find the SNP [" + snpname + "] in the data.");
data.cpp:1354:    if(snplist.empty()) LOGGER.e(0, "on SNP found in this region.");
data.cpp:1368:    if(snplist.empty()) LOGGER.e(0, "on SNP found in this region.");
data.cpp:1379:    if (_include.size() == include_size) LOGGER.e(0, "can not find the SNP [" + snpname + "] in the data.");
data.cpp:1417:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:1441:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:1462:    if (_include.size() == 0) LOGGER.e(0, "No SNP is retained for analysis.");
data.cpp:1472:    if (!i_indi_list) LOGGER.e(0, "can not open the file [" + indi_list_file + "] to read.");
data.cpp:1504:    if (!isex) LOGGER.e(0, "can not open the file [" + sex_file + "] to read.");
data.cpp:1517:        if (str_buf != "1" && str_buf != "2" && str_buf != "M" && str_buf != "F") LOGGER.e(0, "unrecognized sex code: \"" + fid + " " + pid + " " + str_buf + "\" in [" + sex_file + "].");
data.cpp:1530:        if (confirm[_keep[i]] != 1) LOGGER.e(0, "sex information for all of the included individuals should be updated.");
data.cpp:1537:    if (!i_ref_A) LOGGER.e(0, "can not open the file [" + ref_A_file + "] to read.");
data.cpp:1555:            } else LOGGER.e(0, "invalid reference allele for SNP \"" + _snp_name[iter->second] + "\".");
data.cpp:1646:    if (!iRsq) LOGGER.e(0, "can not open the file [" + zinfofile + "] to read.");
data.cpp:1662:            if (fbuf > 2.0 || fbuf < 0.0) LOGGER.e(0, "invalid value of imputation Rsq for the SNP " + snp_name_buf + ".");
data.cpp:1676:    if (!ifreq) LOGGER.e(0, "can not open the file [" + freq + "] to read.");
data.cpp:1694:            if (fbuf > 1.0 || fbuf < 0.0) LOGGER.e(0, "invalid value of allele frequency for the SNP " + snp_name_buf + ".");
data.cpp:1696:                LOGGER.e(0, "Invalid allele type \"" + ref_A_buf + "\" for the SNP " + _snp_name[iter->second] + ".");
data.cpp:1714:    if (!ofreq) LOGGER.e(0, "can not open the file [" + save_freq + "] to write.");
data.cpp:1729:    if (!i_indi_blup) LOGGER.e(0, "can not open the file [" + blup_indi_file + "] to read.");
data.cpp:1974:    if(std && _dosage_flag) LOGGER.e(0, "the --recode-std is invalid for dosage data.");
data.cpp:1993:    if (!zoutf.is_open()) LOGGER.e(0, "can not open the file [" + X_zFile + "] to write.");
edata.cpp:19:    if (!einf.is_open()) LOGGER.e(0, "can not open the file [" + efile + "] to read.");
edata.cpp:26:    if(col_num < 3) LOGGER.e(0, "there needs be at least 3 columns in the file [" + efile + "].");
edata.cpp:46:        if (!(ss >> id_buf)){ errmsg<<"in line "<<i+2<<"."; LOGGER.e(0, errmsg.str()); }
edata.cpp:48:        if (!(ss >> id_buf)){ errmsg<<"in line "<<i+2<<"."; LOGGER.e(0, errmsg.str()); }
edata.cpp:51:            if (!(ss >> id_buf)){ errmsg<<"in line "<<i+2<<"."; LOGGER.e(0, errmsg.str()); }
edata.cpp:73:        if (size == _probe_name_map.size()) LOGGER.e(0, "Duplicate probe name found: \"" + _probe_name[i] + "\".");
ejma.cpp:69:    if (!eR_inf.is_open()) LOGGER.e(0, "can not open the file [" + eR_file + "] to read.");
ejma.cpp:80:            if(!(eR_inf >> _ecojo_wholeR(i,j))) LOGGER.e(0, "incorrect format of [" + eR_file + "].");
ejma.cpp:93:    if (!e_meta) LOGGER.e(0, "can not open the file [" + e_metafile + "] to read.");
ejma.cpp:101:    if (StrFunc::split_string(str_buf, vs_buf) < 3) LOGGER.e(0, "there needs be at least 3 columns in the file [" + e_metafile + "].");
ejma.cpp:106:        if(!(iss >> str_buf)){ errmsg<<"in line "<<line<<"."; LOGGER.e(0, errmsg.str()); }
ejma.cpp:109:        if(!(iss >> d_buf)){ errmsg<<"in line "<<line<<"."; LOGGER.e(0, errmsg.str()); }
ejma.cpp:111:        if(!(iss >> d_buf)){ errmsg<<"in line "<<line<<"."; LOGGER.e(0, errmsg.str()); }
ejma.cpp:116:    if(probe_buf.size()<1) LOGGER.e(0, "no probe remains in the analysis.");
ejma.cpp:187:    if (slct.size() >= _keep.size()) LOGGER.e(0, "too many probes. The number of probes in a joint analysis should not be larger than the sample size.");
ejma.cpp:198:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
ejma.cpp:438:        //if (!comput_inverse_logdet_LU_mkl(_ecojo_wholeR, logdet)) LOGGER.e(0, "\n  the correlation matrix is not invertible.");
ejma.cpp:445:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
est_hsq.cpp:65:    if (!in_phen) LOGGER.e(0, "can not open the file [" + phen_file + "] to read.");
est_hsq.cpp:75:    if (phen_num <= 0) LOGGER.e(0, "no phenotype data is found.");
est_hsq.cpp:80:        LOGGER.e(0, errmsg.str());
est_hsq.cpp:85:        LOGGER.e(0, errmsg.str());
est_hsq.cpp:104:            LOGGER.e(0, errmsg.str());
est_hsq.cpp:130:    if (!in_covar) LOGGER.e(0, "can not open the file [" + covar_file + "] to read.");
est_hsq.cpp:158:        if (line > 0 && fac_num != prev_fac_num) LOGGER.e(0, "each row should have the same number of columns.\n" + id_buf + "\t" + str_buf);
est_hsq.cpp:176:    if (!in_GE) LOGGER.e(0, "can not open the file [" + GE_file + "] to read.");
est_hsq.cpp:187:    if (GE_num == 0) LOGGER.e(0, "no " + env + " factor is specified. Please check the format of the file: " + GE_file + ".");
est_hsq.cpp:196:    if (!in_phen) LOGGER.e(0, "can not open the weight [" + phen_file + "] to read.");
est_hsq.cpp:206:    if (phen_num <= 0) LOGGER.e(0, "no weight data is found.");
est_hsq.cpp:219:            LOGGER.e(0, errmsg.str());
est_hsq.cpp:314:    if (_n < 1) LOGGER.e(0, "no individual is in common in the input files.");
est_hsq.cpp:329:        //if(mlmassoc) LOGGER.e(0, "the option --mlm-assoc is valid for the quantitative trait only.");
est_hsq.cpp:531:            LOGGER.e(0, errmsg.str());
est_hsq.cpp:535:    if (_r_indx.size() == _r_indx_drop.size()) LOGGER.e(0, "no component has been dropped from the model. Please check the --reml-lrt option.");
est_hsq.cpp:553:        if (qcovar_num == 0) LOGGER.e(0, "no quantitative covariate is found.");
est_hsq.cpp:612:    if (value.size() > 0.5 * vec.size()) LOGGER.e(0, errmsg1); // LOGGER.e(0, "too many classes for the envronmental factor. \nPlease make sure you input a discrete variable as the environmental factor.");
est_hsq.cpp:613:    if (value.size() == 1) LOGGER.e(0, errmsg2); //LOGGER.e(0, "the envronmental factor should has more than one classes.");
est_hsq.cpp:648:        LOGGER.e(0, "invalid phenotype. Please check the phenotype file (or after covariates merged).");
est_hsq.cpp:731:        if (!(fabs(_y_Ssq) < 1e30)) LOGGER.e(0, "the phenotypic variance is infinite. Please check the missing data in your phenotype file. Missing values should be represented by \"NA\" or \"-9\".");
est_hsq.cpp:736:        LOGGER.e(0, errmsg.str());
est_hsq.cpp:740:        LOGGER.e(0, errmsg.str());
est_hsq.cpp:744:    if (_n < 10) LOGGER.e(0, "sample size is too small.");
est_hsq.cpp:851:    if (!o_reml) LOGGER.e(0, "can not open the file [" + reml_rst_file + "] to write.");
est_hsq.cpp:997:            if (d_buf > 1.0) LOGGER.e(0, "\n  --reml-priors. The sum of all prior values for trait 1 should not exceed 1.0.");
est_hsq.cpp:1004:            if (d_buf > 1.0) LOGGER.e(0, "\n  --reml-priors. The sum of all prior values for trait 2 should not exceed 1.0.");
est_hsq.cpp:1027:        if (d_buf > 1.0) LOGGER.e(0, "\n  --reml-priors. The sum of all prior values should not exceed 1.0.");
est_hsq.cpp:1096:                if(!calcu_Vi(_Vi, varcmp, logdet, iter)) LOGGER.e(0, "V matrix is not positive-definite.");
est_hsq.cpp:1154:                LOGGER.e(0, "analysis stopped because more than half of the variance components are constrained. The result would be unreliable.\n Please have a try to add the option --reml-no-constrain.");
est_hsq.cpp:1158:        //if (constrain_num == _r_indx.size()) LOGGER.e(0, "analysis stopped because all variance components are constrained. You may have a try of adding the option --reml-no-constrain.");
est_hsq.cpp:1190:                if (_reml_max_iter > 1) LOGGER.e(0, errmsg.str());
est_hsq.cpp:1322:                LOGGER.e(0, "the variance-covariance matrix V can't be inverted.\nTry --reml-alg-inv 1 for diagonal addition value or --reml-alg-inv 2 for bending Vi.");
est_hsq.cpp:1369:                    else LOGGER.e(0, "the variance-covaraince matrix V is not positive definite.");
est_hsq.cpp:1385:                    else LOGGER.e(0, "the variance-covaraince matrix V is still not invertible using LU decomposition.");
est_hsq.cpp:1520:    if(!SquareMatrixInverse(Xt_Vi_X_i, logdet_Xt_Vi_X, rank, method)) LOGGER.e(0, "\n  the X^t * V^-1 * X matrix is not invertible. Please check the covariate(s) and/or the environmental factor(s).");
est_hsq.cpp:1563:        else LOGGER.e(0, "the information matrix is not invertible.");
est_hsq.cpp:1630:        else LOGGER.e(0, "the information matrix is not invertible.");
est_hsq.cpp:1785:    if (!o_b_snp) LOGGER.e(0, "can not open the file " + o_b_snp_file + " to write.");
est_hsq.cpp:1828:                LOGGER.e(0, "file [" + grm_files[i] + "] contains a different number of ind than other GRM file.");
est_hsq.cpp:1833:        if ((*A_bin[i]).bad()) LOGGER.e(0, "can not open the file [" + grm_binfile + "] to read.");
est_hsq.cpp:1854:    if (_n < 1) LOGGER.e(0, "no individual is in common in the input files.");
est_hsq.cpp:2093:    if (!os) LOGGER.e(0, "can not open the file [" + ofile + "] to write.");
est_hsq.cpp:2129:                LOGGER.e(0, "file [" + grm_files[i] + "] contains a different number of ind than other GRM file.");
est_hsq.cpp:2134:        if ((*A_bin[i]).bad()) LOGGER.e(0, "can not open the file [" + grm_binfile + "] to read.");
est_hsq.cpp:2159:    if (_n < 1) LOGGER.e(0, "no individual is in common in the input files.");
est_hsq.cpp:2195:    if (y1.size()==0) LOGGER.e(0, "no non-missing phenotypes for trait 1.");
est_hsq.cpp:2196:    if (y2.size()==0) LOGGER.e(0, "no non-missing phenotypes for trait 2.");
est_hsq.cpp:2611:    if (!os) LOGGER.e(0, "can not open the file [" + ofile + "] to write.");
est_hsq.cpp:2638:    if (_n < 1) LOGGER.e(0, "no individual is in common in the input files.");
est_hsq.cpp:2691:    if (!os) LOGGER.e(0, "can not open the file [" + ofile + "] to write.");
gbat.cpp:18:    if (!in_snpAssoc) LOGGER.e(0, "can not open the file [" + snpAssoc_file + "] to read.");
gbat.cpp:25:        if (StrFunc::split_string(str_buf, vs_buf) != 2) LOGGER.e(0, "in line \"" + str_buf + "\".");
gbat.cpp:57:    if (_include.size() < 1) LOGGER.e(0, "no SNP is included in the analysis.");
gbat.cpp:58:    else if (_chr[_include[0]] < 1) LOGGER.e(0, "chromosome information is missing.");
gbat.cpp:59:    else if (_bp[_include[0]] < 1) LOGGER.e(0, "bp information is missing.");
gbat.cpp:64:    if (!in_gAnno) LOGGER.e(0, "can not open the file [" + gAnno_file + "] to read.");
gbat.cpp:69:        if (StrFunc::split_string(str_buf, vs_buf) != 4) LOGGER.e(0, "in line \"" + str_buf + "\".");
gbat.cpp:174:    if (mapped < 1) LOGGER.e(0, "no gene can be mapped to the SNP data. Please check the input data regarding chr and bp.");
gbat.cpp:228:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
grm.cpp:23:        if (_chr[_include[i]] > _autosome_num) LOGGER.e(0, "this option is for the autosomal SNPs only. Please check the option --autosome.");
grm.cpp:29:        if (_chr[_include[i]] != (_autosome_num + 1)) LOGGER.e(0, "this option is for SNPs on the X chromosome only.");
grm.cpp:35:        if (_sex[_keep[i]] != 1 && _sex[_keep[i]] != 2) LOGGER.e(0, "Sex information of the individual \"" + _fid[_keep[i]] + " " + _pid[_keep[i]] + "\" is missing.\nUse --update-sex option to update the sex information of the individuals.");
grm.cpp:196:        if (!A_Bin) LOGGER.e(0, "can not open the file [" + grm_file + "] to write.");
grm.cpp:210:        if (!N_Bin) LOGGER.e(0, "can not open the file [" + grm_N_file + "] to write.");
grm.cpp:227:        if (!zoutf.is_open()) LOGGER.e(0, "can not open the file [" + grm_file + "] to write.");
grm.cpp:247:    if (!Fam) LOGGER.e(0, "can not open the file [" + famfile + "] to write.");
grm.cpp:259:    if (!i_grm_id) LOGGER.e(0, "can not open the file [" + grm_id_file + "] to read.");
grm.cpp:305:    if (!zinf.is_open()) LOGGER.e(0, "can not open the file [" + grm_gzfile + "] to read.");
grm.cpp:317:        if (!(ss >> indx1)) LOGGER.e(0, errmsg + buf);
grm.cpp:318:        if (!(ss >> indx2)) LOGGER.e(0, errmsg + buf);
grm.cpp:319:        if (!(ss >> grm_N_buf)) LOGGER.e(0, errmsg + buf);
grm.cpp:320:        if (!(ss >> grm_buf)) LOGGER.e(0, errmsg + buf);
grm.cpp:321:        if (indx1 < indx2 || indx1 > n || indx2 > n) LOGGER.e(0, errmsg + buf);
grm.cpp:326:        if (ss >> str_buf) LOGGER.e(0, errmsg + buf);
grm.cpp:332:        LOGGER.e(0, errmsg_tmp.str());
grm.cpp:333:        //LOGGER.e(0, "incorrect number of lines in the grm file. *.grm.gz file and *.grm.id file are mismatched?");
grm.cpp:346:    if (!A_bin.is_open()) LOGGER.e(0, "can not open the file [" + grm_binfile + "] to read.");
grm.cpp:353:            if (!(A_bin.read((char*) &f_buf, size))) LOGGER.e(0, "the size of the [" + grm_binfile + "] file is incomplete?");
grm.cpp:362:        if (!N_bin.is_open()) LOGGER.e(0, "can not open the file [" + grm_Nfile + "] to read.");
grm.cpp:369:                if (!(N_bin.read((char*) &f_buf, size))) LOGGER.e(0, "the size of the [" + grm_Nfile + "] file is incomplete?");
grm.cpp:531:    if (_n == 0) LOGGER.e(0, "no individual is in common in the GRM files.");
grm.cpp:577:    if (_n == 0) LOGGER.e(0, "no individual is in common in the GRM files.");
grm.cpp:624:    if (!merge_grm) LOGGER.e(0, "can not open the file [" + merge_grm_file + "] to read.");
grm.cpp:634:    if (grm_files.size() > 1000) LOGGER.e(0, "too many GRM file names specified in [" + merge_grm_file + "]. Maximum is 1000.");
grm.cpp:635:    if (grm_files.size() < 1) LOGGER.e(0, "no GRM file name is found in [" + merge_grm_file + "].");
grm.cpp:682:    if (!o_eval) LOGGER.e(0, "can not open the file [" + eval_file + "] to read.");
grm.cpp:688:    if (!o_evec) LOGGER.e(0, "can not open the file [" + evec_file + "] to read.");
grm.cpp:704:    if (!in_eigenval) LOGGER.e(0, "can not open the file [" + eigenval_file + "] to read.");
grm.cpp:707:    if (!in_eigenvec) LOGGER.e(0, "can not open the file [" + eigenvec_file + "] to read.");
grm.cpp:722:        if(d_buf > 1e10 || d_buf < 1e-10) LOGGER.e(0, "invalid eigenvalue in the file [" + eigenval_file + "].");
grm.cpp:726:    if(eigenvec_num != eigenval_num) LOGGER.e(0, "inconsistent numbers of eigenvalues and eigenvectors in the files [" + eigenval_file + "] and [" + eigenvec_file + "]");
grm.cpp:739:    if(_n < 1) LOGGER.e(0, "no individual is in common between the input files.");
grm.cpp:766:    if(!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
grm.cpp:789:    if (!h_pc_load) LOGGER.e(0, "can't open the loading file [" + f_pc_load + "] to read.");
grm.cpp:795:    if(!ofile) LOGGER.e(0, "failed to open the file [" + out_filename + "] to write.");
grm.cpp:815:        LOGGER.e(0, "the loading file has different number of column! Please check your loading file");
grm.cpp:818:        LOGGER.e(0, "only " + to_string(N_loading_file) + " loadings, thus not able to project into " + to_string(N) + " PCs.");
gsmr.cpp:13:        LOGGER.e(0, "Cannot open file [" + input_file + "] to read.");
gsmr.cpp:25:        LOGGER.e(0, "The GWAS summary data should be GCTA-COJO format. Please check.");
gsmr.cpp:51:        LOGGER.e(0, "Cannot open the file [" + gsmr_file_list + "] to read.");
gsmr.cpp:63:            LOGGER.e(0, "Format of file [" + gsmr_file_list + "] is not correct, line " + to_string(line_number) + ".");
gsmr.cpp:76:                    LOGGER.e(0, "Invalid sample prevalence for [" + pheno_name[line_number] + "].");
gsmr.cpp:81:                    LOGGER.e(0, "Invalid population prevalence for [" + pheno_name[line_number] + "].");
gsmr.cpp:157:    if(nsnp<nsnp_gsmr) LOGGER.e(0, "No enough SNPs to perform GSMR analysis.");
gsmr.cpp:173:        if(_meta_vp_trait[i] < 0) LOGGER.e(0, "Negative phenotypic variance of trait " + _gwas_trait_name[i] + ".");
gsmr.cpp:196:    if(nsnp<1) LOGGER.e(0, "None SNPs are retained for the GSMR analysis.");
gsmr.cpp:512:        if(!o_pleio_snp) LOGGER.e(0, "Cannot open file [" + pleio_snpfile + "] to write pleiotropic SNPs.");
gsmr.cpp:530:            if (!zofile) LOGGER.e(0, "Cannot open the file [" + output_filename + "] to write.");
gsmr.cpp:544:    if (!ofile) LOGGER.e(0, "Cannot open the file [" + output_filename + "] to write.");             
gwas_simu.cpp:23:    if (!i_qtl) LOGGER.e(0, "can not open the file [" + qtl_file + "] to read.");
gwas_simu.cpp:38:            if (fabs(qtl_eff_buf) > 1e5) LOGGER.e(0, "invalid effect size specified for the causal variant [" + str_buf + "].");
gwas_simu.cpp:54:    if(qtl_name_buf.size() < qtl_name.size()) LOGGER.e(0, "there are duplicated SNP IDs.");
gwas_simu.cpp:64:    if (!out_par) LOGGER.e(0, "can not open par file [" + out_parfile + "] to write!");
gwas_simu.cpp:75:    if (!phen) LOGGER.e(0, "can not open the file [" + phenfile + "] to write.");
gwas_simu.cpp:205:        if (!out_emBayesB) LOGGER.e(0, "can not open the file [" + out_rstfile + "] to write.");
gwas_simu.cpp:229:        if(gnrt<1.0 || gnrt>1e5) LOGGER.e(0, "--simu-gener should be within the range from 1 to 100000.");
gwas_simu.cpp:230:        if(hsq>1.0 || hsq<0.0) LOGGER.e(0, "--simu-h2 should be within the range from 0 to 1.");
gwas_simu.cpp:231:        if(K>0.5 || K<0.0001) LOGGER.e(0, "--simu-K should be within the range from 0.0001 to 0.5.");
gwas_simu.cpp:232:        if(!curr_popu && (case_num>1e5 || case_num<1)) LOGGER.e(0, "--simu-cc, Invalid number of cases.");
gwas_simu.cpp:233:        if(!curr_popu && (control_num>1e6 || control_num<1)) LOGGER.e(0, "--simu-cc, Invalid number of controls.");
gwas_simu.cpp:299:        if(!out_par) LOGGER.e(0, "can not open par file ["+out_parfile+"] to write!");
gwas_simu.cpp:370:    if(!out_fam) LOGGER.e(0, "can not open fam file ["+out_famfile+"] to write!");
gwas_simu.cpp:410:        if(!OutBed) LOGGER.e(0, "can not open the file ["+OutBedFile+"] to write.");
gwas_simu.cpp:475:        if(!Fam) LOGGER.e(0, "can not open the fam file "+famfile+" to save!");
gwas_simu.cpp:490:        if(!Bim) LOGGER.e(0, "can not open the file ["+bimfile+"] to write.");
gwas_simu.cpp:516:        if (!i_genet_map) LOGGER.e(0, "can not open HAPMAP genetic map file " + genet_mapfile + "!");
gwas_simu.cpp:557:    if (!out_bim) LOGGER.e(0, "can not open file " + out_bimfile + " to write!");
joint_meta.cpp:22:    if (!Meta) LOGGER.e(0, "can not open the file [" + metafile + "] to read.");
joint_meta.cpp:34:    if (StrFunc::split_string(str_buf, vs_buf) < 7) LOGGER.e(0, "format error in the input file [" + metafile + "].");
joint_meta.cpp:57:        if (N_buf < 10) LOGGER.e(0, "invalid sample size in line:\n\"" + str_buf0 + "\"");
joint_meta.cpp:62:        if (Vp_buf < 0.0) LOGGER.e(0, "in line:\n\"" + str_buf0 + "\"");
joint_meta.cpp:66:            if (GC_buf < 0) LOGGER.e(0, "in line:\n\"" + str_buf0 + "\"");
joint_meta.cpp:157:    if (_include.empty()) LOGGER.e(0, "all the SNPs in the GWAS meta-analysis results can't be found in the genotype data.");
joint_meta.cpp:211:    if (givenSNPs.empty()) LOGGER.e(0, "failed to read any SNP from the file [" + snplistfile + "].");
joint_meta.cpp:221:    else LOGGER.e(0, "none of the given SNPs can be matched to the genotype and summary data.");
joint_meta.cpp:264:    if (slct.size() >= _keep.size()) LOGGER.e(0, "too many SNPs. The number of SNPs in a joint analysis should not be larger than the sample size.");
joint_meta.cpp:294:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
joint_meta.cpp:313:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
joint_meta.cpp:330:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
joint_meta.cpp:353:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
joint_meta.cpp:433:        if (!init_B(slct)) LOGGER.e(0, "there is a collinearity problem of the given list of SNPs.\nYou can try the option --cojo-slct to get rid of one of each pair of highly correlated SNPs.");
joint_meta.cpp:463:    if (d_buf - n < 1) LOGGER.e(0, "no degree of freedom left for the residues, the model is over-fitting. Please specify a more stringent p cutoff value.");
joint_meta.cpp:465:    if (Ve <= 0.0) LOGGER.e(0, "residual variance is out of boundary, the model is over-fitting. Please specify a more stringent p cutoff value.");
joint_meta.cpp:471:        if (!init_B(indx)) LOGGER.e(0, "there is a collinearity problem of the given list of SNPs.\nYou can try the option --cojo-slct to get rid of one of each pair of highly correlated SNPs.");
joint_meta.cpp:501:        if (!init_B(slct)) LOGGER.e(0, "there is a collinearity problem of the given list of SNPs.\nYou can try the option --cojo-slct to get rid of one of each pair of highly correlated SNPs.");
joint_meta.cpp:801:        if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
joint_meta.cpp:807:    } else LOGGER.e(0, "Jacobi iteration not converged. You can increase the maximum number of iterations by the option --massoc-sblup-maxit.");
joint_meta.cpp:826:        LOGGER.e(0, "there are " + to_string(num_err_snp) + " SNPs with MAF=0.");
joint_meta.cpp:886:        LOGGER.e(0, "decomposition failed! The SNP correlation matrix is not positive definite.");
joint_meta.cpp:890:        LOGGER.e(0, "solving failed! Unable to solve the BLUP equation.");
ld.cpp:37:    if (_ld_target_snp.size() == 0) LOGGER.e(0, "no target SNPs are retained to estimate the LD structure.");
ld.cpp:69:    if (!SavFile) LOGGER.e(0, "can not open the file [" + SavFileName + "] to save result!");
ld.cpp:75:    if (!SavFile) LOGGER.e(0, "can not open the file [" + SavFileName + "] to save result.");
ld.cpp:83:    if (!SavFile) LOGGER.e(0, "Can not open the file [" + SavFileName + "] to save result.");
ld.cpp:174:    if (N != y.size() || N < 1) LOGGER.e(0, "The lengths of x and y do not match.");
ld.cpp:507:    if (!in_snpset_filenames) LOGGER.e(0, "can not open the file [" + snpset_filenames_file + "] to read.");
ld.cpp:519:    if (set_num < 1) LOGGER.e(0, "no filename found in [" + snpset_filenames_file + "].");
ld.cpp:524:        if (!i_snplist) LOGGER.e(0, "can not open the file [" + snpset_filenaems[i] + "] to read.");
ld.cpp:752:        if (!ild) LOGGER.e(0, "can not open the file [" + i_ld_file + "] to read.");
ld.cpp:777:            if(!(ild >> _chr[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
ld.cpp:778:            if(!(ild >> _bp[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
ld.cpp:779:            if(!(ild >> _mu[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
ld.cpp:781:            if(!(ild >> mrsq[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
ld.cpp:782:            if(!(ild >> snp_num[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
ld.cpp:783:            if(!(ild >> max_rsq[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
ld.cpp:784:            if(!(ild >> ldscore[i])) LOGGER.e(0, "in the file [" + i_ld_file + "].");
mkl.cpp:303:        if (!A_Bin) LOGGER.e(0, "can not open the file [" + grm_file + "] to write.");
mkl.cpp:313:        if (!N_Bin) LOGGER.e(0, "can not open the file [" + grm_N_file + "] to write.");
mkl.cpp:325:        if (!zoutf.is_open()) LOGGER.e(0, "can not open the file [" + grm_file + "] to write.");
mkl.cpp:338:    if (!Fam) LOGGER.e(0, "can not open the file [" + famfile + "] to write.");
mkl.cpp:373:        LOGGER.e(0, "Cholesky decomposition failed. Invalid values found in the matrix.\n");
mkl.cpp:394:            LOGGER.e(0, "invalid values found in the varaince-covaraince (V) matrix.\n");
mkl.cpp:436:    if (INFO < 0) LOGGER.e(0, "LU decomposition failed. Invalid values found in the matrix.\n");
mkl.cpp:456:            LOGGER.e(0, "invalid values found in the varaince-covaraince (V) matrix.\n");
mkl.cpp:498:    if (INFO < 0) LOGGER.e(0, "LU decomposition failed. Invalid values found in the matrix.\n");
mkl.cpp:519:        if (INFO < 0) LOGGER.e(0, "invalid values found in the varaince-covaraince (V) matrix.\n");
mlm_assoc.cpp:26:    if (subtract_grm_flag && m_grm_flag) LOGGER.e(0, "the --mlma-subtract-grm option can not be used in combination with the --mgrm option.");
mlm_assoc.cpp:35:        LOGGER.e(0, "no file name in --pheno.");
mlm_assoc.cpp:49:        LOGGER.e(0, "no individual is in common in the input files.");
mlm_assoc.cpp:88:    if(_n<1) LOGGER.e(0, "no individual is in common in the input files.");
mlm_assoc.cpp:232:    if(!ofile) LOGGER.e(0, "Can not open the file ["+filename+"] to write.");
mlm_assoc.cpp:335:        if(!comput_inverse_logdet_LU_mkl_array(col_num, Xt_Vi_X, d_buf)) LOGGER.e(0, "Xt_Vi_X is not invertable.");
mlm_assoc.cpp:368:        LOGGER.e(0, "no file name in --pheno.");
mlm_assoc.cpp:383:    if(_n<1) LOGGER.e(0, "no individual is in common in the input files.");
mlm_assoc.cpp:389:    if(vi_buf.size()<2) LOGGER.e(0, "There is only one chromosome. The MLM leave-on-chromosome-out (LOCO) analysis requires at least two chromosome.");
mlm_assoc.cpp:509:    if(!ofile) LOGGER.e(0, "Can not open the file ["+filename+"] to write.");
mtcojo.cpp:141:        LOGGER.e(0, "Cannot open the file [" + mtcojolist_file + "] to read.");
mtcojo.cpp:153:        LOGGER.e(0, "Format of file [" + mtcojolist_file + "] is not correct, line " + to_string(line_number) + ".");
mtcojo.cpp:165:                LOGGER.e(0, "Invalid sample prevalence for trait [" + target_pheno + "].");
mtcojo.cpp:170:                LOGGER.e(0, "Invalid population prevalence for trait [" + target_pheno + "].");
mtcojo.cpp:184:            LOGGER.e(0, "Format of file [" + mtcojolist_file + "] is not correct, line " + to_string(line_number) + ".");
mtcojo.cpp:197:                    LOGGER.e(0, "Invalid sample prevalence for trait [" + line_elements[0] + "].");
mtcojo.cpp:202:                    LOGGER.e(0, "Invalid population prevalence for trait [" + line_elements[0] + "].");
mtcojo.cpp:217:        if(size==snp_name_map.size()) LOGGER.e(0, "Duplicated SNP ID found: " + snplist[i] + ".");
mtcojo.cpp:259:        if(size==snp_add_map.size()) LOGGER.e(0, "Duplicated SNP ID found: " + snplist[i] + ".");
mtcojo.cpp:324:         LOGGER.e(0, "Cannot open the file [" + metafile + "] to read.");
mtcojo.cpp:337:            LOGGER.e(0, "The GWAS summary data file [" + metafile + "] should be GCTA-COJO format, line " + to_string(line_number) + ".");
mtcojo.cpp:363:         LOGGER.e(0, "Cannot open the file [" + metafile + "] to read.");
mtcojo.cpp:374:        if (!(ss >> snpbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:379:            if (!(ss >> strbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:401:        LOGGER.e(0, "Cannot open the file [" + metafile + "] to read.");
mtcojo.cpp:417:            LOGGER.e(0, "The GWAS summary data file [" + metafile + "] should be GCTA-COJO format, line " + to_string(line_number) + ".");
mtcojo.cpp:467:        LOGGER.e(0, "Cannot open the file [" + metafile + "] to read.");
mtcojo.cpp:487:        if (!(ss >> snpbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:492:        if (!(ss >> strbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:496:        if (!(ss >> strbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:500:        if (!(ss >> valbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:504:        if (!(ss >> valbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:508:        if (!(ss >> valbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:512:        if (!(ss >> valbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:516:        if (!(ss >> valbuf)) LOGGER.e(0, err_msg + to_string(line_number) + "," + buf);
mtcojo.cpp:613:        if(!obadsnp) LOGGER.e(0, "Cannot open file [" + badsnpfile + "] to write bad SNPs.");
mtcojo.cpp:666:        if(!oafsnp) LOGGER.e(0, "Cannot open file [" + afsnpfile + "] to write bad SNPs.");
mtcojo.cpp:672:            LOGGER.e(0, "There are too many SNPs that have large difference of allele frequency. Please check your summary datasets.");
mtcojo.cpp:694:        if(!oafsnp) LOGGER.e(0, "Cannot open file [" + afsnpfile + "] to write bad SNPs.");
mtcojo.cpp:785:    if(_meta_vp_trait(0) < 0) LOGGER.e(0, "Negative phenotypic variance of the target trait, " + _covar_pheno_name[0] + ".");
mtcojo.cpp:798:        if(_meta_vp_trait(i+1) < 0) LOGGER.e(0, "Negative phenotypic variance of the covariate #" + to_string(i+1) + ", " + _covar_pheno_name[i+1] + ".");
mtcojo.cpp:822:    if(nsnp<1) LOGGER.e(0, "None SNPs are retained after filtering.");
mtcojo.cpp:848:    if (!extern_bxy) LOGGER.e(0, "Cannot open the file [" + filestr + "] to read.");
mtcojo.cpp:856:        if(line_elements.size() != 2) LOGGER.e(0, "Format of file [" + filestr + "] is not correct.");
mtcojo.cpp:1137:        LOGGER.e(0, "The variance-covariance matrix of bxy is not invertible.");
mtcojo.cpp:1706:        if (!ref_marker) LOGGER.e(0, "Cannot open the file [" + filestr + "] to read.");
mtcojo.cpp:1711:        if(line_elements.size() != 1) LOGGER.e(0, "Format of file [" + filestr + "] is not correct.");
mtcojo.cpp:1738:            LOGGER.e(0, "Format of file [" + filestr + "] is not correct, line " + to_string(line_number) + ".");
mtcojo.cpp:1779:            LOGGER.e(0, "Format of file [" + filestr + "] is not correct, line " + to_string(line_number) + ".");
mtcojo.cpp:1816:        else LOGGER.e(0, "Cannot open the file [" + filestr_t1 + "] or [" + filestr_t2 + "] to read.");
mtcojo.cpp:2128:            LOGGER.e(0, "Negative SNP heritability estimate for " + trait_name[i] + ". Exiting ...");
mtcojo.cpp:2199:            LOGGER.e(0, "\nThere is no SNP in common between the summary data and the LD score files. Please double check.");
mtcojo.cpp:2319:    if (!ofile) LOGGER.e(0, "Cannot open the file [" + output_file + "] to write.");
mtcojo.cpp:2377:            LOGGER.e(0, "Not enough SNPs to perform the univariate LD score regression analysis. The mtCOJO analysis will be conducted assuming no sample overlap between the GWAS data for target and covariate traits.");
mtcojo.cpp:2379:            LOGGER.e(0, "Not enough SNPs to perform the univariate and bivariate LD score regression analyses. The mtCOJO analysis needs SNP-based heritability from univariate LD score regression analysis and genetic correlation from bivariate LD score regression analysis.");
mtcojo.cpp:2413:        if(!o_pleio_snp) LOGGER.e(0, "Cannot open file [" + pleio_snpfile + "] to write pleiotropic SNPs.");
option.cpp:183:            if (thread_num < 1 || thread_num > 1000) LOGGER.e(0, "\n  --thread-num should be from 1 to 1000.\n");
option.cpp:188:            if (thread_num < 1 || thread_num > 1000) LOGGER.e(0, "\n  --threads should be from 1 to 1000.\n");
option.cpp:199:            if (GC_cutoff < 0.0 || GC_cutoff > 1.0) LOGGER.e(0, "\n  --gencall should be within the range from 0 to 1.\n");
option.cpp:238:            if (dose_Rsq_cutoff < 0.0 || dose_Rsq_cutoff > 1.0) LOGGER.e(0, "\n  --imput-rsq should be within the range from 0 to 1.\n");
option.cpp:266:            if (extract_chr_start < 1 || extract_chr_start > 100) LOGGER.e(0, "\n  --chr should be within the range from 1 to 100.\n");
option.cpp:270:            if (autosome_num < 1 || autosome_num > 100) LOGGER.e(0, "\n  invalid number specified after the option --autosome-num.\n");
option.cpp:290:            if(extract_region_wind < 1000 || extract_region_wind > 1e8) LOGGER.e(0, "\n  the second paramter of --extract-region is distance in Kb unit. It should take value between 1 and 1e5.");
option.cpp:297:            if(extract_region_wind < 1000 || extract_region_wind > 1e8) LOGGER.e(0, "\n  the second paramter of --extract-region is distance in Kb unit. It should take value between 1 and 1e5.");
option.cpp:306:            if(exclude_region_wind < 1000 || exclude_region_wind > 1e8) LOGGER.e(0, "\n  the second paramter of --exclude-region is distance in Kb unit. It should take value between 1 and 1e5.");
option.cpp:313:            if(exclude_region_wind < 1000 || exclude_region_wind > 1e8) LOGGER.e(0, "\n  the second paramter of --exclude-region is distance in Kb unit. It should take value between 1 and 1e5.");
option.cpp:317:            if (maf < 0 || maf > 0.5) LOGGER.e(0, "\n  --maf should be within the range from 0 to 0.5.\n");
option.cpp:321:            if (max_maf <= 0) LOGGER.e(0, "\n  --max-maf should be > 0.\n");
option.cpp:385:            if (rm_high_ld_cutoff <= 0 || rm_high_ld_cutoff >= 1) LOGGER.e(0, "\n  the value to be specified after --rm-high-ld should be within the range from 0 to 1.\n");
option.cpp:400:            if (make_grm_mtd < 0 || make_grm_mtd > 1) LOGGER.e(0, "\n  --make-grm-alg should be 0 or 1.\n");
option.cpp:447:            if (grm_adj_fac < 0 || grm_adj_fac > 1) LOGGER.e(0, "\n  the value to be specified after --grm-adj should be within the range from 0 to 1.\n");
option.cpp:451:            if (dosage_compen != 0 && dosage_compen != 1) LOGGER.e(0, "\n  the value to be specified after --dc should be 0 or 1.\n");
option.cpp:461:            if (bK_threshold < 0 || bK_threshold > 1) LOGGER.e(0, "\n  --make-bK threshold should be range from 0 to 1.\n");
option.cpp:472:            if (out_pc_num < 1) LOGGER.e(0, "\n  the value to be specified after --pca should be positive.\n");
option.cpp:479:            //if(pcl_grm_N < 1 || pcl_grm_N > 1e20) LOGGER.e(0, "\n  invalid number of SNPs used to calculate PCs."); 
option.cpp:486:            if(project_N < 1 || project_N > 1e3) LOGGER.e(0, "\n  invalid number of PCs to output");
option.cpp:498:            if (LD_step < 1 || LD_step > 20) LOGGER.e(0, "\n  --ld-step should be within the range from 1 to 20.\n");
option.cpp:506:                LOGGER.e(0, err_msg.str());
option.cpp:511:            if (LD_sig <= 0) LOGGER.e(0, "\n  --ld-sig should be > 0.\n");
option.cpp:519:            if (LD_prune_rsq < 0.0001 || LD_prune_rsq > 0.9999) LOGGER.e(0, "\n  --ld-pruning should be within the range from 0.0001 to 0.9999.\n");
option.cpp:539:                LOGGER.e(0, err_msg.str());
option.cpp:554:            if (LD_seg < 10) LOGGER.e(0, "\n  input value for --ld-score-region needs to be > 10.\n");
option.cpp:569:            if (simu_case_num < 10) LOGGER.e(0, "--simu-cc, Invalid number of cases. Minimun number 10.");
option.cpp:570:            if (simu_control_num < 10) LOGGER.e(0, "--simu-cc, Invalid number of controls. Minimum number 10.");
option.cpp:574:            if (simu_rep < 1 || simu_rep > 10000) LOGGER.e(0, "--simu-rep should be within the range from 1 to 10000.");
option.cpp:578:            if (simu_h2 > 1.0 || simu_h2 < 0.0) LOGGER.e(0, "--simu-h2 should be within the range from 0 to 1.");
option.cpp:582:            if (simu_K > 0.5 || simu_K < 0.0001) LOGGER.e(0, "--simu-K should be within the range from 0.0001 to 0.5.");
option.cpp:596:            if (simu_seed <= 100) LOGGER.e(0, "--simu-seed should be >100.");
option.cpp:600:            if (simu_eff_mod != 0 && simu_eff_mod !=1) LOGGER.e(0, "--simu-eff-mod should be 0 or 1.");
option.cpp:621:            if (mphen_buf.size() < 2 && mphen_buf.size() > 0) LOGGER.e(0, "\n  --HEreg-bivar. Please specify two traits for the HE regression for covariance analysis.");
option.cpp:629:            if (mphen < 1 || mphen2 < 1 || mphen == mphen2) LOGGER.e(0, "\n --HEreg-bivar. Invalid input parameters.");
option.cpp:640:            if (prevalence <= 0 || prevalence >= 1) LOGGER.e(0, "\n  --prevalence should be between 0 to 1.\n");
option.cpp:653:            if (reml_mtd < 0 || reml_mtd > 2) LOGGER.e(0, "\n  --reml-alg should be 0, 1 or 2.\n");
option.cpp:672:            if (err_flag || reml_priors.empty()) LOGGER.e(0, "\n  --reml-priors. Prior values of variance explained should be between 0 and 1.\n");
option.cpp:689:            if (reml_priors_var.empty()) LOGGER.e(0, "\n  " + s_buf + ". Prior values of variance components are required.\n");
option.cpp:710:            if (err_flag || reml_drop.empty()) LOGGER.e(0, "\n  invalid values specified after --reml-lrt.\n");
option.cpp:714:            if (MaxIter < 1 || MaxIter > 10000) LOGGER.e(0, "\n  --reml-maxit should be within the range from 1 to 10000.\n");
option.cpp:749:            if (mphen < 1) LOGGER.e(0, "--mpheno should be > 0.");
option.cpp:789:            if (mphen_buf.size() < 2 && mphen_buf.size() > 0) LOGGER.e(0, "\n  --reml-bivar. Please specify two traits for the bivariate REML analysis.");
option.cpp:797:            if (mphen < 1 || mphen2 < 1 || mphen == mphen2) LOGGER.e(0, "\n  --reml-bivar. Invalid input parameters.");
option.cpp:807:            if (K_buf.size() < 1 || K_buf.size() > 2) LOGGER.e(0, "\n  --reml-bivar-prevalence. Please specify the prevalences of the two diseases.");
option.cpp:809:                if (K_buf[0] < 0.0 || K_buf[0] > 1.0 || K_buf[1] < 0.0 || K_buf[1] > 1.0) LOGGER.e(0, "\n  --reml-bivar-prevalence. Disease prevalence should be between 0 and 1.");
option.cpp:814:                if (K_buf[0] < 0.0 || K_buf[0] > 1.0) LOGGER.e(0, "\n  --reml-bivar-prevalence. Disease prevalence should be between 0 and 1.");
option.cpp:835:            if (err_flag || fixed_rg_val.empty()) LOGGER.e(0, "\n  --reml-bivar-lrt-rg. Any input paramter should be within the range from -1 to 1.\n");
option.cpp:839:                if ((CommFunc::FloatNotEqual(fixed_rg_val[0], 0.0) && haveZero) || (CommFunc::FloatEqual(fixed_rg_val[0], 0.0) && !haveZero)) LOGGER.e(0, "\n  --reml-bivar-lrt-rg. Input paramters should be all zero or all non-zero values.\n");
option.cpp:868:            if (massoc_top_SNPs < 1 || massoc_top_SNPs > 10000) LOGGER.e(0, "\n  --cojo-top-SNPs should be within the range from 1 to 10000.\n");
option.cpp:875:            if (massoc_p > 0.05 || massoc_p <= 0) LOGGER.e(0, "\n  --cojo-p should be within the range from 0 to 0.05.\n");
option.cpp:881:            if (massoc_collinear > 0.99 || massoc_collinear < 0.01) LOGGER.e(0, "\n  --cojo-collinear should be within the ragne from 0.01 to 0.99.\n");
option.cpp:887:            if (massoc_wind > 100000) LOGGER.e(0, "\n  invalid value for --cojo-wind. Valid range: 100 ~ 100000\n");
option.cpp:889:            //if (massoc_wind < 100 || massoc_wind > 100000) LOGGER.e(0, "\n  invalid value for --cojo-wind. Valid range: 100 ~ 100000\n");
option.cpp:905:                if (massoc_gc_val < 1 || massoc_gc_val > 10) LOGGER.e(0, "\n  invalid value specified after --cojo-gc.\n");
option.cpp:912:            if (massoc_sblup_fac < 0) LOGGER.e(0, "\n  invalid value for --cojo-sblup.\n");
option.cpp:942:            if (sbat_ld_cutoff <= 0.1) LOGGER.e(0, "\n  --fastBAT_ld_cutoff should be > 0.1\n");
option.cpp:961:            if (sbat_wind < 0 || sbat_wind > 1000) LOGGER.e(0, "\n  invalid value for --fastBAT-wind. Valid range: 0 ~ 1000\n");
option.cpp:972:            if (sbat_seg_size < 10 || sbat_seg_size > 10000) LOGGER.e(0, "\n  invalid value for --fastBAT-seg. Valid range: 10 ~ 10000\n");
option.cpp:999:            if (ecojo_p > 0.05 || ecojo_p <= 0) LOGGER.e(0, "\n  --ecojo-p should be within the range from 0 to 0.05.\n");
option.cpp:1004:            if (ecojo_collinear > 1 || ecojo_collinear < 0.01) LOGGER.e(0, "\n  --ecojo-collinear should be within the ragne from 0.01 to 0.99.\n");
option.cpp:1010:            if (ecojo_lambda < 0.01 || ecojo_lambda > 0.99) LOGGER.e(0, "\n  --ecojo-blup should be within the ragne from 0.01 to 0.99.\n");
option.cpp:1028:            if (make_erm_mtd < 1 || make_erm_mtd > 3) LOGGER.e(0, "\n  --make-erm-alg should be 1, 2 or 3.\n");
option.cpp:1040:                LOGGER.e(0, "--gsmr-file, please specify the GWAS summary data for the exposure(s) and the outcome(s).");
option.cpp:1053:               LOGGER.e(0, "--gsmr-direction should be 0 (forward-GSMR), 1 (reverse-GSMR) or 2 (bi-GSMR).");
option.cpp:1056:            LOGGER.e(0, "--gsmr-alg has been superceded by --gsmr-direction.");
option.cpp:1061:                LOGGER.e(0, "--gsmr-so should be 0 (LD score regression) or 1 (correlation of SNP effects).");
option.cpp:1104:                LOGGER.e(0, "--diff-freq, Invalid threshold for difference of allele frequencies.");
option.cpp:1109:                LOGGER.e(0, "--gwas-thresh, Invalid p-value threshold for GWAS summary data.");
option.cpp:1120:                LOGGER.e(0, "--heidi-thresh, please specify threshold(s) for HEIDI-outlier analysis.");
option.cpp:1127:                LOGGER.e(0, "--heidi-thresh, Invalid p-value threshold for single-SNP-based HEIDI-outlier test.");
option.cpp:1129:                LOGGER.e(0, "--heidi-thresh, Invalid p-value threshold for multi-SNP-based HEIDI-outlier test.");
option.cpp:1135:            LOGGER.e(0, "--heidi-snp is discontinued. Please use --gsmr-snp-min to specify minimum number of SNP instruments for the HEIDI-outlier analysis.");
option.cpp:1140:                LOGGER.e(0, "--gsmr-snp-min, Invalid SNP number threshold for GSMR analysis.");
option.cpp:1145:                LOGGER.e(0, "--gsmr-ld-fdr, Invalid FDR threshold for LD correlation matrix.");
option.cpp:1148:            LOGGER.e(0, "--clump-p1 is discontinued. Please use --gwas-thresh to specify p-value threshold for index SNPs.");   
option.cpp:1152:                LOGGER.e(0, "--clump-kb, Invalid window size for clumping analysis.");
option.cpp:1157:                LOGGER.e(0, "--clump-r2, Invalid LD r2 threshold for clumping analysis.");
option.cpp:1172:            LOGGER.e(0, errmsg.str());
option.cpp:1177:    if (bfile2_flag && !bfile_flag) LOGGER.e(0, "the option --bfile2 should always go with the option --bfile.");
option.cpp:1178:    if(bfile_flag && grm_cutoff>-1.0) LOGGER.e(0, "the --grm-cutoff option is invalid when used in combined with the --bfile option.");
option.cpp:1215:    if (dosage_compen>-1 && update_sex_file.empty()) LOGGER.e(0, "you need to specify the sex information for the individuals by the option --update-sex because of the option --dc.");
option.cpp:1216:    if (bfile2_flag && update_freq_file.empty()) LOGGER.e(0, "you need to update the allele frequency by the option --update-freq because there are two datasets.");
option.cpp:1217:    if ((dose_beagle_flag || dose_mach_flag || dose_mach_gz_flag) && dominance_flag) LOGGER.e(0, "unable to calculate the GRM for dominance effect using imputed dosage data.");
option.cpp:1218:    if (make_grm_xchar_flag && dominance_flag) LOGGER.e(0, "unable to calculate the GRM for dominance effect for the X chromosome.");
option.cpp:1229:    if(bivar_reml_flag && prevalence_flag) LOGGER.e(0, "--prevalence option is not compatible with --reml-bivar option. Please check the --reml-bivar-prevalence option!");
option.cpp:1231:        if(ref_ld_flag && !w_ld_flag) LOGGER.e(0, "--ref-ld-chr, please specify the directory of LD score files.");
option.cpp:1232:        if(!ref_ld_flag && w_ld_flag) LOGGER.e(0, "--w-ld-chr, please specify the directory of LD scores for the regression weights.");
option.cpp:1237:        // if(gsmr_so_alg == 0 && !ref_ld_flag && !w_ld_flag) LOGGER.e(0, "Please specify the directory of LD score files to perform LD score regression analysis.");
option.cpp:1283:        if (RG_summary_file.empty()) LOGGER.e(0, "please input the summary information for the raw data files by the option --raw-summary.");
option.cpp:1301:                if (update_freq_file.empty()) LOGGER.e(0, "since there are two dataset, you should update the allele frequencies that are calculated in the combined dataset.");
option.cpp:1379:        if (massoc_slct_flag | massoc_joint_flag | !massoc_cond_snplist.empty()) LOGGER.e(0, "the --dosage option can't be used in combined with the --cojo options.");
option.cpp:1416:    else if ((reml_flag || bivar_reml_flag) && phen_file.empty()) LOGGER.e(0, "\n  phenotype file is required for reml analysis.\n");
option.cpp:1430:    else LOGGER.e(0, "no analysis has been launched by the option(s).\n");
pc_adjust.cpp:18:    if (!in_lambda) LOGGER.e(0, "Cannot open the file [" + eigenvalue_file + "] to read.");
pc_adjust.cpp:35:    if (!meta_list) LOGGER.e(0, "Cannot open the file [" + pcadjust_list_file + "] to read.");
pc_adjust.cpp:53:       LOGGER.e(0, "At least 1 PC loading is required.");
pc_adjust.cpp:55:        LOGGER.e(0, "There are " + to_string(ncovar) + " covariates summary data. " + to_string(_eigen_value.size()) + " eigenvalues are provided.");
pc_adjust.cpp:102:            if(i==0) LOGGER.e(0, "Negative phenotypic variance of the target trait.");
pc_adjust.cpp:103:            else LOGGER.e(0, "Negative phenotypic variance of the covariate #" + to_string(i+1) + ".");
pc_adjust.cpp:127:    if(nsnp<1) LOGGER.e(0, "None SNPs are retained after filtering.");
pc_adjust.cpp:176:        if(!oafsnp) LOGGER.e(0, "Cannot open file [" + afsnpfile + "] to write bad SNPs.");
pc_adjust.cpp:182:            LOGGER.e(0, "There are too many SNPs where allele frequencies are not available. Please check your summary datasets.");
pc_adjust.cpp:428:    if (!ofile) LOGGER.e(0, "Cannot open the file [" + output_file + "] to write.");
popu_genet.cpp:27:    if(!i_aa) LOGGER.e(0, "can not open the file ["+aa_file+"] to read.");
popu_genet.cpp:101:	if(!o_paa) LOGGER.e(0, "can not open the file ["+paa_file+"] to write.");
popu_genet.cpp:202:	if(!o_ibc) LOGGER.e(0, "can not open the file ["+ibc_file+"] to write.");
popu_genet.cpp:235:    if(!ofile) LOGGER.e(0, "Can not open the file ["+outfile+"] to write.");
popu_genet.cpp:274:    if(!ifstream_subpopu) LOGGER.e(0, "can not open the file ["+filename+"] to read.");
raw_geno.cpp:20:    if(!i_snp_info) LOGGER.e(0, "can not open the file ["+snp_info_file+"] to read.");
raw_geno.cpp:40:    if(!omap) LOGGER.e(0, "can not open the file ["+map_file+"] to write.");
raw_geno.cpp:47:    if(!i_fnames) LOGGER.e(0, "can not open the file ["+fname_file+"] to read.");
raw_geno.cpp:67:    if(!oped) LOGGER.e(0, "can not open the file ["+ped_file+"] to read.");
raw_geno.cpp:88:    if(!i_IRG) LOGGER.e(0, "can not open the file ["+IRG_fname+"] to read.");
raw_geno.cpp:101:    if(snp_num!=_snp_num) LOGGER.e(0, "the number of SNPs specified in the summary file does not match that in the raw genotype file ["+IRG_fname+"].");
raw_geno.cpp:106:        if(vs_buf[0]!=_snp_name[i]) LOGGER.e(0, "the SNP ["+vs_buf[0]+"] specified in the summary file does not match that in the raw genotype file ["+IRG_fname+"]. The order of the SNPs have been changed?");
reml_within_family.cpp:60:            LOGGER.e(0, "can't inverse the matrix within familiy");
sbat.cpp:18:    if (!in_snpAssoc) LOGGER.e(0, "can not open the file [" + snpAssoc_file + "] to read.");
sbat.cpp:26:        if (StrFunc::split_string(str_buf, vs_buf, " \t") != 2) LOGGER.e(0, "in line \"" + str_buf + "\".");
sbat.cpp:62:    if (_include.size() < 1) LOGGER.e(0, "no SNP is included in the analysis.");
sbat.cpp:63:    else if (_chr[_include[0]] < 1) LOGGER.e(0, "chromosome information is missing.");
sbat.cpp:64:    else if (_bp[_include[0]] < 1) LOGGER.e(0, "bp information is missing.");
sbat.cpp:69:    if (!in_gAnno) LOGGER.e(0, "can not open the file [" + gAnno_file + "] to read.");
sbat.cpp:74:        if (StrFunc::split_string(str_buf, vs_buf) != 4) LOGGER.e(0, "in line \"" + str_buf + "\".");
sbat.cpp:156:    if (mapped < 1) LOGGER.e(0, "no gene can be mapped to the SNP data. Please check the input data regarding chr and bp.");
sbat.cpp:228:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
sbat.cpp:247:    if (!in_snpset) LOGGER.e(0, "can not open the file [" + snpset_file + "] to read.");
sbat.cpp:366:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
sbat.cpp:462:    if (!ofile) LOGGER.e(0, "Can not open the file [" + filename + "] to write.");
