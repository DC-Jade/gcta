bivar_reml.cpp:81:    LOGGER.i(0, to_string(_n) + " individuals are in common in these files.");
data.cpp:383:    LOGGER.i(0, "There are " + to_string(multi_bfiles.size()) + " PLINK genotype files specified in [" + bfile_list + "].");
data.cpp:390:    if(msg_flag) LOGGER.i(0, "Reading PLINK FAM file from [" + famfile + "].");
data.cpp:415:        LOGGER.i(0, to_string(indi_num) + " individuals to be included from [" + famfile + "].");
data.cpp:421:    LOGGER.i(0, "\nReading the PLINK FAM files ....");
data.cpp:441:    LOGGER.i(0, to_string(_indi_num) + " individuals have been included from the PLINK FAM files.");
data.cpp:498:    LOGGER.w(0, "Duplicated SNP ID " + strbuf + " has been changed to " + tsnp_name + ".");
data.cpp:531:    if(msg_flag) LOGGER.i(0, "Reading PLINK BIM file from [" + bimfile + "].");
data.cpp:555:        LOGGER.i(0, to_string(snp_num) + " SNPs to be included from [" + bimfile + "].");
data.cpp:561:    LOGGER.i(0, "Reading the PLINK BIM files ...");
data.cpp:585:    LOGGER.i(0, to_string(_snp_num) + " SNPs to be included from PLINK BIM files.");
data.cpp:628:    if(msg_flag) LOGGER.i(0, "Reading PLINK BED file from [" + bedfile + "] in SNP-major format ...");
data.cpp:660:    if(msg_flag) LOGGER.i(0, "Genotype data for " + to_string(nindi_chr) + " individuals and " + to_string(nsnp_chr) + " SNPs to be included from [" + bedfile + "].");
data.cpp:672:    LOGGER.i(0, "Reading PLINK BED files ...");
data.cpp:695:            LOGGER.i(0, "Skip reading " + multi_bfiles[i] + ".bed, no SNPs retained on this chromosome.");
data.cpp:702:    LOGGER.i(0, "Genotype data for " + to_string(_keep.size()) + " individuals and " + to_string(_include.size()) + " SNPs have been included.");
data.cpp:1603:        LOGGER.w(0, "gender information (the 5th column of the .fam file) is required for analysis on chromosome X, GCTA assumes those missing samples as female.");
est_hsq.cpp:229:            LOGGER.w(0, "ignored line #" + to_string(line) + ".");
est_hsq.cpp:1152:                LOGGER.w(0, "more than half of the variance components are constrained.");
grm.cpp:888:        LOGGER.w(0, to_string(missnp_list.size()) + " SNPs are not found or alleles mismatch in the target genotype"); 
gsmr.cpp:98:    LOGGER.i(0, "\nReading GWAS summary data for exposure(s) from [" + expo_file_list + "].");
gsmr.cpp:119:    LOGGER.i(0, "Reading GWAS summary data for outcome(s) from [" + outcome_file_list + "].");
gsmr.cpp:156:    LOGGER.i(0, to_string(nsnp) + " SNPs genome-wide significant SNPs in common between the exposure(s) and the outcome(s).");
gsmr.cpp:182:    LOGGER.i(0, "Filtering out SNPs with multiple alleles or missing value ...");
gsmr.cpp:197:    else LOGGER.i(0, to_string(nsnp) + " SNPs are retained after filtering.");
gsmr.cpp:208:    LOGGER.i(0, to_string(_include.size()) + " genome-wide significant SNPs with p < " + ss.str() + " are in common among the exposure(s), the outcome(s) and the LD reference sample.\n");
gsmr.cpp:253:    LOGGER.i(0, "LD score regression analysis to estimate sample overlap between each pair of exposure and outcome ...");
gsmr.cpp:258:    LOGGER.i(0, "Univariate LD score regression analysis ...");
gsmr.cpp:263:    LOGGER.i(0, "Bivariate LD score regression analysis ...");
gsmr.cpp:281:    LOGGER.i(0, "Intercept:");
gsmr.cpp:287:        LOGGER.i(0, ss.str());
gsmr.cpp:289:    LOGGER.i(0, "LD score regression analysis completed.");
gsmr.cpp:303:    LOGGER.i(0, "Correlation of SNP effects to estimate sample overlap between each pair of exposure and outcome ...");
gsmr.cpp:340:    LOGGER.i(0, "Correlation:");
gsmr.cpp:346:        LOGGER.i(0, ss.str());
gsmr.cpp:348:    LOGGER.i(0, "Correlation computation completed.");
gsmr.cpp:461:    LOGGER.i(0, "Checking allele frequencies among the GWAS summary data and the reference sample...");
gsmr.cpp:505:    LOGGER.i(0, "");
gsmr.cpp:515:        LOGGER.i(0,  "The pleiotropic SNPs filtered by HEIDI-outlier analysis have been saved in [" + pleio_snpfile + "].");
gsmr.cpp:528:            LOGGER.i(0, "Saving the SNP instruments for the GSMR plots to [" + output_filename + "] ...");
gsmr.cpp:535:            LOGGER.w(0, "Not enough SNP instruments to be saved in the compressed text file.");
gsmr.cpp:541:    LOGGER.i(0, "Saving the GSMR analyses results of " + to_string(_expo_num) + " exposure(s) and "
gsmr.cpp:547:    LOGGER.i(0, "\nGSMR analyses completed.");
gsmr.cpp:566:            LOGGER.i(0, "\nForward GSMR analysis for exposure #" + to_string(i+1) + " and outcome #" + to_string(j+1) + " ...");         
gsmr.cpp:570:                LOGGER.w(0, err_msg);
gsmr.cpp:572:                LOGGER.i(0, "Forward GSMR analysis for exposure #" + to_string(i+1) + " and outcome #" + to_string(j+1) + " completed.");
gsmr.cpp:603:            LOGGER.i(0, "\nReverse GSMR analysis for exposure #" + to_string(j+1) + " and outcome #" + to_string(i+1) + " ...");
gsmr.cpp:607:                LOGGER.w(0, err_msg);
gsmr.cpp:609:                LOGGER.i(0, "Reverse GSMR analysis for exposure #" + to_string(j+1) + " and outcome #" + to_string(i+1) + " completed.");
mtcojo.cpp:618:        LOGGER.i(0,  to_string(nbadsnps) + " SNPs have missing value or mismatched alleles. These SNPs have been saved in [" + badsnpfile + "].");
mtcojo.cpp:670:        LOGGER.i(0,  to_string(nafsnps) + " SNP(s) have large difference of allele frequency among the GWAS summary data and the reference sample. These SNPs have been saved in [" + afsnpfile + "].");
mtcojo.cpp:689:    if(n_raresnp > 0) LOGGER.w(0,  "There are " + to_string(n_raresnp) + " SNP(s) with MAF < 0.01 in the reference sample.");
mtcojo.cpp:698:        LOGGER.i(0,  to_string(nafsnps) + " monomorphic SNP(s) have been saved in [" + afsnpfile + "].");
mtcojo.cpp:729:    LOGGER.i(0, "\nReading GWAS summary data from [" + mtcojolist_file + "] ...");
mtcojo.cpp:770:    LOGGER.i(0, to_string(nsnp) + " SNPs in common between the target trait and the covariate trait(s).");
mtcojo.cpp:807:    LOGGER.i(0, "Filtering out SNPs with multiple alleles or missing value ...");
mtcojo.cpp:823:    else LOGGER.i(0, to_string(nsnp) + " SNPs are retained after filtering.");
mtcojo.cpp:833:    LOGGER.i(0, "There are " + to_string(_include.size()) + " genome-wide significant SNPs with p < " + ss.str() + ".\n");
mtcojo.cpp:834:    if(keptsnps.size() < nsnp_gsmr) LOGGER.w(0, "We will use LD score regression to estimate bxy, because there are not enough significant SNPs for GSMR analysis. At least " + to_string(nsnp_gsmr) + " SNPs are required.\n");
mtcojo.cpp:1524:    //LOGGER.i(0, to_string(n_indices_snp) + " index SNPs are obtained from the clumping analysis of the " + nsnp + " genome-wide significant SNPs.");
mtcojo.cpp:1530:        LOGGER.i(0, to_string(n_indices_snp) + " index SNPs are obtained from the clumping analysis with p < " + ss1.str() + " and LD r2 < " + ss2.str() + ".");
mtcojo.cpp:1566:    LOGGER.i(0, to_string(n_indices_snp) + " index SNPs are obtained from the clumping analysis with p < " + ss1.str() + " and LD r2 < " + ss2.str() + ".");
mtcojo.cpp:1689:        LOGGER.i(0, to_string(npleio) + " pleiotropic SNPs are filtered by HEIDI-outlier analysis.");	
mtcojo.cpp:1695:    LOGGER.i(0, to_string(n_indices_snp) + " index SNPs are retained after HEIDI-outlier analysis.");    
mtcojo.cpp:2109:            LOGGER.w(0, "Only " + to_string(nsnp_cm_trait[i]) + " are retained in the univariate LD score regression analysis for " 
mtcojo.cpp:2126:            LOGGER.i(0, trait_name[i] + ": " + to_string(rst_ldsc[0]) + " " + to_string(rst_ldsc[1]));  
mtcojo.cpp:2149:            LOGGER.w(0, "Only " + to_string(n_cm_snps_buf) + " are retained in the bivariate LD score regression analysis for " 
mtcojo.cpp:2213:    LOGGER.i(0, "\nUnivariate LD score regression analysis to estimate SNP-based heritability ..."); 
mtcojo.cpp:2221:    LOGGER.i(0, "Bivariate LD score regression analysis to estimate genetic correlation between each pair of traits ...");
mtcojo.cpp:2237:    LOGGER.i(0, "Intercept:");
mtcojo.cpp:2242:        LOGGER.i(0, ss.str());
mtcojo.cpp:2244:    LOGGER.i(0, "rg:");
mtcojo.cpp:2249:        LOGGER.i(0, ss.str());
mtcojo.cpp:2251:    LOGGER.i(0, "The LD score regression analyses completed.");
mtcojo.cpp:2346:    LOGGER.i(0, "Checking the difference in allele frequency between the GWAS summary datasets and the LD reference sample...");
mtcojo.cpp:2392:        LOGGER.i(0, "\nGSMR analysis for covariate #" + to_string(i) + " (" + trait_name[i] + ")" + " ...");
mtcojo.cpp:2396:            LOGGER.w(0, err_msg);
mtcojo.cpp:2397:            LOGGER.i(0, "bxy is estimated from rg.");
mtcojo.cpp:2399:            LOGGER.i(0, "bxy " + to_string(gsmr_rst[0]) + " " + to_string(gsmr_rst[1]));
mtcojo.cpp:2407:        LOGGER.i(0, "bxy " + to_string(gsmr_rst[0]) + " " + to_string(gsmr_rst[1]));
mtcojo.cpp:2408:        LOGGER.i(0, "GSMR analysis for covariate #" + to_string(i) + " (" + trait_name[i] + ") completed.");
mtcojo.cpp:2416:        LOGGER.i(0,  "The pleiotropic SNPs filtered by HEIDI-outlier analysis have been saved in [" + pleio_snpfile + "].");
mtcojo.cpp:2443:    LOGGER.i(0, "\nmtCOJO analysis ...");
mtcojo.cpp:2444:    LOGGER.i(0, "There are " + to_string(nsnp) + " SNPs in common between the target trait and all the covariate trait(s).");
mtcojo.cpp:2453:    LOGGER.i(0, "Saving the mtCOJO analysis results of " + to_string(nsnp) + " remaining SNPs to [" + output_filename + "] ...");
mtcojo.cpp:2454:    LOGGER.i(0, "mtCOJO analysis completed.");
option.cpp:1233:        if(gsmr_snp_update_flag) LOGGER.w(0, "--gsmr-snp has been superseded by --gsmr-snp-min.");
option.cpp:1234:        if(nsnp_gsmr < 5) LOGGER.w(0, "The number of SNP instruments included in the analysis is too small. There might not be enough SNPs to perform the HEIDI-outlier analysis.");
option.cpp:1235:        // if(!gsmr_so_flag && ref_ld_flag && w_ld_flag) { gsmr_so_alg = 0; LOGGER.w(0, "--gsmr-so is not specified. The default value is 0. GSMR analysis will perform LD score regression to estimate sample overlap."); }
option.cpp:1236:        // if(gsmr_so_alg == 1 && ref_ld_flag && w_ld_flag) { gsmr_so_alg = 0; LOGGER.w(0, "The LD score regression instead of correlation method will be used to estimate sample overlap."); }
option.cpp:1238:        // if(!gsmr_so_flag && !ref_ld_flag && !w_ld_flag) LOGGER.w(0, "The GSMR analysis will be performed assuming no sample overlap between the GWAS data for exposure and outcome.");
option.cpp:1241:        LOGGER.w(0, "The threshold of multi-SNP-based HEIDI-outlier analysis is not specified. The default value is " + to_string(global_heidi_thresh).substr(0,5) + ".");
option.cpp:1244:        LOGGER.w(0, "--gsmr2-beta is not specified. GCTA will perform single-SNP-based HEIDI-outlier analysis, which was published in Zhu et al. 2018 Nature Communications. The threshold of multi-SNP-based HEIDI-outlier analysis will not be accepted.");
pc_adjust.cpp:13:    LOGGER.i(0, "\nReading eigenvalues from [" + eigenvalue_file + "]...");
pc_adjust.cpp:26:            LOGGER.w(0, "Only the first element would be accepted. File [" + eigenvalue_file + "], line " + to_string(line_number) + ".");
pc_adjust.cpp:43:            LOGGER.w(0, "Only the first element would be accepted. File [" + pcadjust_list_file + "], line " + to_string(line_number) + ".");
pc_adjust.cpp:85:    LOGGER.i(0, to_string(nsnp) + " SNPs in common between the summary data and the PC loading(s).");
pc_adjust.cpp:113:    LOGGER.i(0, "Filtering out SNPs with multiple alleles or missing value ...");
pc_adjust.cpp:128:    else LOGGER.i(0, to_string(nsnp) + " SNPs are retained after filtering.");
pc_adjust.cpp:129:    LOGGER.i(0, to_string(_include.size()) + " SNPs are in common between the summary data and the LD reference sample.");
pc_adjust.cpp:180:        LOGGER.i(0,  to_string(nafsnps) + " SNP(s) do not have allele frequency. These SNPs have been saved in [" + afsnpfile + "].");
pc_adjust.cpp:455:    LOGGER.i(0, "Checking allele frequencies among the GWAS summary data and the reference sample...");
pc_adjust.cpp:463:    LOGGER.i(0, "Update allele frequencies for the GWAS summary data ...");
